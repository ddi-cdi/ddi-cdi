# PLEASE DO NOT EDIT THIS CODE!
# This code was generated by the Eclipse Acceleo module UCMIS M2T on 2023-05-25 10:41:35.
# Target language is 'Ontology Turtle' ('onto.ttl') generated on the basis of the model 'DDICDIModels'.

# Ontology for FormatDescription
# based on the UML package DDICDIModels::DDICDILibrary::Classes::FormatDescription
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix ucmis: <http://example.org/TODO/ucmis/> .
@prefix cdi:   <http://ddialliance.org/Specification/DDI-CDI/1.0/RDF/> .

<FormatDescription.onto.ttl> a owl:Ontology;
  rdfs:label "FormatDescription";
  rdfs:comment "This package contains classes for tying the logical constructs in various data descriptions to physical formats."@en;
.

# class DataPointPosition
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::DataPointPosition
cdi:DataPointPosition
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "DataPointPosition";
  rdfs:comment "Definition\n============\nIndexed location of the associated member within the associated list."@en;
  
.

cdi:DataPointPosition-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:DataPointPosition;
  rdfs:range cdi:Identifier;
.

cdi:DataPointPosition-value
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "value";
  rdfs:comment "Index value of the member in an ordered array."@en;
  rdfs:domain cdi:DataPointPosition;
  rdfs:range xsd:integer;
.


cdi:DataPointPosition_indexes_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "indexes";
  skos:altLabel "DataPointPosition_indexes_DataPoint";
  rdfs:comment "Data point position indexes zero to one data point."@en;
  rdfs:domain cdi:DataPointPosition;
  rdfs:range cdi:DataPoint;
.


# class DataPointRelationship
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::DataPointRelationship
cdi:DataPointRelationship
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "DataPointRelationship";
  rdfs:comment "Definition\n============\nRelations used by the data point relation structure of a logical record to describe specific source-target data points and their relationship."@en;
  
.

cdi:DataPointRelationship-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:DataPointRelationship;
  rdfs:range cdi:Identifier;
.

cdi:DataPointRelationship-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:DataPointRelationship;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:DataPointRelationship_hasSource_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSource";
  skos:altLabel "DataPointRelationship_hasSource_DataPoint";
  
  rdfs:domain cdi:DataPointRelationship;
  rdfs:range cdi:DataPoint;
.

cdi:DataPointRelationship_hasTarget_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasTarget";
  skos:altLabel "DataPointRelationship_hasTarget_DataPoint";
  rdfs:comment "Data point relationship has zero to many target data points."@en;
  rdfs:domain cdi:DataPointRelationship;
  rdfs:range cdi:DataPoint;
.


# class DataStore
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::DataStore
cdi:DataStore
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "DataStore";
  rdfs:comment "Definition \n============ \nCollection of logical records.  \n\nExamples \n========== \nThe data lineage of an individual business process or an entire data pipeline are both examples of a logical record relation structures. In a data lineage we can observe how logical records are connected within a business process or across business processes.  \n\nExplanatory notes \n=================== \nKeep in mind that a logical records are definitions, not a \"datasets\". Logical records organized in a structured collection is called a logical record relation structure. Instances of logical records instantiated as organizations of data points hosting data are described in format description. A data store is reusable across studies. Each study has at most one data store."@en;
  
.

cdi:DataStore-aboutMissing
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "aboutMissing";
  rdfs:comment "General information about missing data, e.g., that missing data have been standardized across the collection, missing data are present because of merging, etc.-  corresponds to DDI2.5 dataMsng."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:InternationalString;
.

cdi:DataStore-allowsDuplicates
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "allowsDuplicates";
  rdfs:comment "If value is False, the members are unique within the collection - if True, there may be duplicates. (Note that a mathematical “bag” permits duplicates and is unordered - a “set” does not have duplicates and may be ordered.)"@en;
  rdfs:domain cdi:DataStore;
  rdfs:range xsd:boolean;
.

cdi:DataStore-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. Examples would be creator, contributor, title, copyright, embargo, and license information. A set of information useful for attribution, data discovery, and access. This is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:CatalogDetails;
.

cdi:DataStore-characterSet
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "characterSet";
  rdfs:comment "Default character set used in the Data Store."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range xsd:string;
.

cdi:DataStore-dataStoreType
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "dataStoreType";
  rdfs:comment "The type of datastore. Could be delimited file, fixed record length file, relational database, etc. Points to an external definition which can be part of a controlled vocabulary maintained by the DDI Alliance."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:DataStore-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:Identifier;
.

cdi:DataStore-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:ObjectName;
.

cdi:DataStore-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:InternationalString;
.

cdi:DataStore-recordCount
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "recordCount";
  rdfs:comment "The number of records in the Data Store."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range xsd:integer;
.


cdi:DataStore_isDefinedBy_Concept
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isDefinedBy";
  skos:altLabel "DataStore_isDefinedBy_Concept";
  rdfs:comment "The conceptual basis for the collection of members."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:Concept;
.

cdi:DataStore_has_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "DataStore_has_LogicalRecord";
  
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:LogicalRecord;
.

cdi:DataStore_has_LogicalRecordPosition
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "DataStore_has_LogicalRecordPosition";
  
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:LogicalRecordPosition;
.

cdi:DataStore_has_RecordRelation
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "DataStore_has_RecordRelation";
  rdfs:comment "The record relation that defines the relationship and linking requirements between logical records in the data store."@en;
  rdfs:domain cdi:DataStore;
  rdfs:range cdi:RecordRelation;
.


# class InstanceVariableMap
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::InstanceVariableMap
cdi:InstanceVariableMap
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "InstanceVariableMap";
  rdfs:comment "Definition \n============ \nKey value relationship for two or more logical records where the key is one or more equivalent instance variables and the value is a defined relationship or a relationship to a set value.  \n\nExplanatory notes \n=================== \nThe instance variable map identifies the variables which are used to connect two data sets, as when persons in one structure are associated with households in another structure. For logical records Household and Person, the keys are Household ID (HHID in Household Record), and Person ID (HHIDP in Person Record). Their value relationship is Equal, and set value is n.a. For each person in the person record, the value of HHIDP will be exactly the same as the value of HHID in the household record for the household to which they belong. (Correspondence type refers to the variables themselves rather than the value of the variables concerned.) In this context correspondence type will normally be set to ExactMatch."@en;
  
.

cdi:InstanceVariableMap-comparison
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "comparison";
  rdfs:comment "Relationship between the source and target instance variables or to the setValue if provided."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range cdi:ComparisonOperator;
.

cdi:InstanceVariableMap-correspondence
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "correspondence";
  rdfs:comment "Describes the relationship between the source and target members using both controlled vocabularies and descriptive text. In this context the correspondence refers to the two instance variables, not their value. The relationship would normally be ExactMatch."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range cdi:CorrespondenceDefinition;
.

cdi:InstanceVariableMap-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range cdi:Identifier;
.

cdi:InstanceVariableMap-setValue
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "setValue";
  rdfs:comment "A fixed value for the key source Instance Variables."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range xsd:string;
.


cdi:InstanceVariableMap_hasSource_InstanceVariable
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSource";
  skos:altLabel "InstanceVariableMap_hasSource_InstanceVariable";
  rdfs:comment "The source instance variable for the relationship."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range cdi:InstanceVariable;
.

cdi:InstanceVariableMap_hasTarget_InstanceVariable
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasTarget";
  skos:altLabel "InstanceVariableMap_hasTarget_InstanceVariable";
  rdfs:comment "Target instance variables if a directional relation is used."@en;
  rdfs:domain cdi:InstanceVariableMap;
  rdfs:range cdi:InstanceVariable;
.


# class LogicalRecord
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecord
cdi:LogicalRecord
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "LogicalRecord";
  rdfs:comment "Definition \n============ \nCollection of instance variables."@en;
  
.

cdi:LogicalRecord-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:LogicalRecord;
  rdfs:range cdi:Identifier;
.


cdi:LogicalRecord_has_InstanceVariable
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "LogicalRecord_has_InstanceVariable";
  
  rdfs:domain cdi:LogicalRecord;
  rdfs:range cdi:InstanceVariable;
.

cdi:LogicalRecord_isDefinedBy_Concept
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isDefinedBy";
  skos:altLabel "LogicalRecord_isDefinedBy_Concept";
  rdfs:comment "The conceptual basis for the collection of members."@en;
  rdfs:domain cdi:LogicalRecord;
  rdfs:range cdi:Concept;
.

cdi:LogicalRecord_organizes_DataSet
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "organizes";
  skos:altLabel "LogicalRecord_organizes_DataSet";
  
  rdfs:domain cdi:LogicalRecord;
  rdfs:range cdi:DataSet;
.


# class LogicalRecordPosition
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecordPosition
cdi:LogicalRecordPosition
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "LogicalRecordPosition";
  rdfs:comment "Definition \n============ \nAssigns a position of the logical record within the data store."@en;
  
.

cdi:LogicalRecordPosition-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:LogicalRecordPosition;
  rdfs:range cdi:Identifier;
.

cdi:LogicalRecordPosition-value
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "value";
  rdfs:comment "Index value of the member in an ordered array."@en;
  rdfs:domain cdi:LogicalRecordPosition;
  rdfs:range xsd:integer;
.


cdi:LogicalRecordPosition_indexes_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "indexes";
  skos:altLabel "LogicalRecordPosition_indexes_LogicalRecord";
  rdfs:comment "Logical record position indexes a logical record."@en;
  rdfs:domain cdi:LogicalRecordPosition;
  rdfs:range cdi:LogicalRecord;
.


# class LogicalRecordRelationship
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecordRelationship
cdi:LogicalRecordRelationship
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "LogicalRecordRelationship";
  rdfs:comment "Definition \n============ \nRelationships between logical records."@en;
  
.

cdi:LogicalRecordRelationship-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:LogicalRecordRelationship;
  rdfs:range cdi:Identifier;
.

cdi:LogicalRecordRelationship-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:LogicalRecordRelationship;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:LogicalRecordRelationship_hasSource_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSource";
  skos:altLabel "LogicalRecordRelationship_hasSource_LogicalRecord";
  
  rdfs:domain cdi:LogicalRecordRelationship;
  rdfs:range cdi:LogicalRecord;
.

cdi:LogicalRecordRelationship_hasTarget_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasTarget";
  skos:altLabel "LogicalRecordRelationship_hasTarget_LogicalRecord";
  rdfs:comment "Note that this can be realized as a collection to support tuples."@en;
  rdfs:domain cdi:LogicalRecordRelationship;
  rdfs:range cdi:LogicalRecord;
.


# class LogicalRecordRelationStructure
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecordRelationStructure
cdi:LogicalRecordRelationStructure
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "LogicalRecordRelationStructure";
  rdfs:comment "Definition\n============\nStructuring of relationships between logical records in a data store.\n\nExamples\n==========\nA data store with a Household, Family, and Person logical record type. Allows for describing parent/child, whole/part, or other relationships as appropriate."@en;
  
.

cdi:LogicalRecordRelationStructure-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:Identifier;
.

cdi:LogicalRecordRelationStructure-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:ObjectName;
.

cdi:LogicalRecordRelationStructure-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:InternationalString;
.

cdi:LogicalRecordRelationStructure-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:LogicalRecordRelationStructure-specification
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "specification";
  rdfs:comment "Provides information on reflexivity, transitivity, and symmetry of relationship using a descriptive term from an enumerated list. Use if all relations within this relation structure are of the same specification."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:StructureSpecification;
.

cdi:LogicalRecordRelationStructure-topology
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "topology";
  rdfs:comment "Indicates the form of the associations among members of the collection. Specifies the way in which constituent parts are interrelated or arranged."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:LogicalRecordRelationStructure-totality
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "totality";
  rdfs:comment "Indicates whether the related collections are comprehensive in terms of their coverage."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:StructureExtent;
.


cdi:LogicalRecordRelationStructure_has_LogicalRecordRelationship
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "LogicalRecordRelationStructure_has_LogicalRecordRelationship";
  rdfs:comment "LogicalRecordRelationStructure has zero to many LogicalRecordRelationships."@en;
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:LogicalRecordRelationship;
.

cdi:LogicalRecordRelationStructure_structures_DataStore
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "structures";
  skos:altLabel "LogicalRecordRelationStructure_structures_DataStore";
  
  rdfs:domain cdi:LogicalRecordRelationStructure;
  rdfs:range cdi:DataStore;
.


# class PhysicalDataSet
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalDataSet
cdi:PhysicalDataSet
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalDataSet";
  rdfs:comment "Definition\n============\nInformation needed for understanding the physical structure of data coming from a file or other source.\n\nExamples\n==========\nThe physical data set is the entry point for information about a file or other source. It includes information about the name of a file, the structure of segments in a file.\n\nExplanatory notes\n===================\nMultiple styles of structural description are supported: including describing files as unit-record (unit segment layout) files; describing cubes; and describing event-history (spell) data."@en;
  
.

cdi:PhysicalDataSet-allowsDuplicates
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "allowsDuplicates";
  rdfs:comment "If value is False, the members are unique within the collection - if True, there may be duplicates. (Note that a mathematical \"bag\" permits duplicates and is unordered - a \"set\" does not have duplicates and may be ordered.)"@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range xsd:boolean;
.

cdi:PhysicalDataSet-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. \n\nExamples would be creator, contributor, title, copyright, embargo, and license information\n\nA set of information useful for attribution, data discovery, and access.\nThis is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:CatalogDetails;
.

cdi:PhysicalDataSet-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalDataSet-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalDataSet-numberOfSegments
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "numberOfSegments";
  rdfs:comment "The number of distinct segments (e.g., segments patterns with different structures, identified separately) in a physical dataset."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range xsd:integer;
.

cdi:PhysicalDataSet-overview
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "overview";
  rdfs:comment "Short natural language account of the information obtained from the combination of properties and relationships associated with an object."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalDataSet-physicalFileName
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "physicalFileName";
  rdfs:comment "Use when multiple physical segments are stored in a single file."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range xsd:string;
.

cdi:PhysicalDataSet-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:InternationalString;
.


cdi:PhysicalDataSet_isDefinedBy_Concept
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isDefinedBy";
  skos:altLabel "PhysicalDataSet_isDefinedBy_Concept";
  rdfs:comment "The conceptual basis for the collection of members."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:Concept;
.

cdi:PhysicalDataSet_formats_DataStore
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "formats";
  skos:altLabel "PhysicalDataSet_formats_DataStore";
  rdfs:comment "Data store physically represented by the structure description."@en;
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:DataStore;
.

cdi:PhysicalDataSet_has_PhysicalRecordSegment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalDataSet_has_PhysicalRecordSegment";
  
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:PhysicalRecordSegment;
.

cdi:PhysicalDataSet_has_PhysicalRecordSegmentPosition
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalDataSet_has_PhysicalRecordSegmentPosition";
  
  rdfs:domain cdi:PhysicalDataSet;
  rdfs:range cdi:PhysicalRecordSegmentPosition;
.


# class PhysicalDataSetStructure
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalDataSetStructure
cdi:PhysicalDataSetStructure
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalDataSetStructure";
  rdfs:comment "Definition \n============ \nOrdering for physical record segments, which map to a logical record.\n\nExplanatory notes \n=================== \nThe same logical record layout may be the source member in several adjacency lists. This can happen when physical record segments are also population specific. In this instance each adjacency list associated with a logical record layout is associated with a different population."@en;
  
.

cdi:PhysicalDataSetStructure-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalDataSetStructure-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalDataSetStructure-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalDataSetStructure-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalDataSetStructure-specification
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "specification";
  rdfs:comment "Provides information on reflexivity, transitivity, and symmetry of relationship using a descriptive term from an enumerated list. Use if all relations within this relation structure are of the same specification."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:StructureSpecification;
.

cdi:PhysicalDataSetStructure-topology
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "topology";
  rdfs:comment "Indicates the form of the associations among members of the collection. Specifies the way in which constituent parts are interrelated or arranged."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalDataSetStructure-totality
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "totality";
  rdfs:comment "Indicates whether the related collections are comprehensive in terms of their coverage."@en;
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:StructureExtent;
.


cdi:PhysicalDataSetStructure_has_PhysicalRecordSegmentRelationship
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalDataSetStructure_has_PhysicalRecordSegmentRelationship";
  
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:PhysicalRecordSegmentRelationship;
.

cdi:PhysicalDataSetStructure_structures_PhysicalDataSet
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "structures";
  skos:altLabel "PhysicalDataSetStructure_structures_PhysicalDataSet";
  
  rdfs:domain cdi:PhysicalDataSetStructure;
  rdfs:range cdi:PhysicalDataSet;
.


# class PhysicalLayoutRelationStructure
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalLayoutRelationStructure
cdi:PhysicalLayoutRelationStructure
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalLayoutRelationStructure";
  rdfs:comment "Definition\n==========\nRealization of relation structure that is used to describe the sequence of value mappings in a physical layout.  \n\nExamples\n======== \nThe W3C Tabular Data on the Web specification section 4.5 Cells (https://www.w3.org/TR/tabular-data-model/#content-type) allows for a list datatype within cells. In the example below there are three top level instance variables: PersonID - the person identifier; AgeYr - age in years; BpSys_Dia - blood pressure (a list containing Systolic and Diastolic values). There are two variables at a secondary level of the hierarchy: Systolic - the systolic pressure; Diastolic - the diastolic pressure. The delimited file below uses the comma to separate \"columns\" and forward slash to separate elements of a blood pressure list. ::\n\n   PersonID, AgeYr, BpSys_Dia  \n   1,22,119/67  \n   2,68,122/70  \n\nThe physical relation structure in this case would describe a BpSys_Dia list variable as containing an ordered sequence of the Systolic and Diastolic instance variables.   \n\nExplanatory notes\n=================\nThis can be more complex than a simple sequence."@en;
  
.

cdi:PhysicalLayoutRelationStructure-criteria
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "criteria";
  rdfs:comment "Intentional definition of the order criteria (e.g. alphabetical, numerical, increasing, decreasing, etc.)."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalLayoutRelationStructure-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalLayoutRelationStructure-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "A linguistic signifier. Human understandable name (word, phrase, or mnemonic) that reflects the ISO/IEC 11179-5 naming principles. If more than one name is provided then a context to differentiate usage must be provided as well."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalLayoutRelationStructure-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalLayoutRelationStructure-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalLayoutRelationStructure-specification
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "specification";
  rdfs:comment "Provides information on reflexivity, transitivity, and symmetry of relationship using a descriptive term from an enumerated list. Use if all relations within this relation structure are of the same specification."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:StructureSpecification;
.

cdi:PhysicalLayoutRelationStructure-topology
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "topology";
  rdfs:comment "Indicates the form of the associations among members of the collection. Specifies the way in which constituent parts are interrelated or arranged."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalLayoutRelationStructure-totality
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "totality";
  rdfs:comment "Indicates whether the related collections are comprehensive in terms of their coverage."@en;
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:StructureExtent;
.


cdi:PhysicalLayoutRelationStructure_has_ValueMappingRelationship
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalLayoutRelationStructure_has_ValueMappingRelationship";
  
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:ValueMappingRelationship;
.

cdi:PhysicalLayoutRelationStructure_structures_PhysicalSegmentLayout
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "structures";
  skos:altLabel "PhysicalLayoutRelationStructure_structures_PhysicalSegmentLayout";
  
  rdfs:domain cdi:PhysicalLayoutRelationStructure;
  rdfs:range cdi:PhysicalSegmentLayout;
.


# class PhysicalRecordSegment
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalRecordSegment
cdi:PhysicalRecordSegment
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalRecordSegment";
  rdfs:comment "Definition\n==========\nDescription of each physical storage segment required to completely cover a physical record representing the logical record.\n\nExamples\n========\nThe file below has four instance variables: PersonId, SegmentId, AgeYr, and HeightCm. The data for each person (identified by PersonId) is recorded in two segments (identified by SegmentId), \"a\" and \"b\". AgeYr is on physical segment a, and HeightCm is on segment b. These are the same data as described in the unit segment layout documentation. ::\n\n   1 a  22  \n   1 b 183  \n   2 a  45\n   2 b 175  \n\nExplanatory notes\n=================\nA logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment."@en;
  
.

cdi:PhysicalRecordSegment-allowsDuplicates
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "allowsDuplicates";
  rdfs:comment "If value is False, the members are unique within the collection - if True, there may be duplicates. (Note that a mathematical “bag” permits duplicates and is unordered - a “set” does not have duplicates and may be ordered.)"@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range xsd:boolean;
.

cdi:PhysicalRecordSegment-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. \n\nExamples would be creator, contributor, title, copyright, embargo, and license information\n\nA set of information useful for attribution, data discovery, and access.\nThis is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:CatalogDetails;
.

cdi:PhysicalRecordSegment-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalRecordSegment-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalRecordSegment-physicalFileName
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "physicalFileName";
  rdfs:comment "Use when each physical segment is stored in its own file."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range xsd:string;
.

cdi:PhysicalRecordSegment-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:InternationalString;
.


cdi:PhysicalRecordSegment_isDefinedBy_Concept
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isDefinedBy";
  skos:altLabel "PhysicalRecordSegment_isDefinedBy_Concept";
  rdfs:comment "The conceptual basis for the collection of members."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:Concept;
.

cdi:PhysicalRecordSegment_represents_Population
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "represents";
  skos:altLabel "PhysicalRecordSegment_represents_Population";
  rdfs:comment "A record segment may represent a specific population or sub-population within a larger set of segments. Allows for the identification of this filter for membership in the segment."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:Population;
.

cdi:PhysicalRecordSegment_has_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalRecordSegment_has_DataPoint";
  
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:DataPoint;
.

cdi:PhysicalRecordSegment_has_DataPointPosition
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalRecordSegment_has_DataPointPosition";
  
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:DataPointPosition;
.

cdi:PhysicalRecordSegment_has_PhysicalSegmentLayout
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalRecordSegment_has_PhysicalSegmentLayout";
  
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:PhysicalSegmentLayout;
.

cdi:PhysicalRecordSegment_mapsTo_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "mapsTo";
  skos:altLabel "PhysicalRecordSegment_mapsTo_LogicalRecord";
  rdfs:comment "Every data record has zero to many physical record segments. It is possible to describe a physical data product and its record segment(s) without reference to a data record."@en;
  rdfs:domain cdi:PhysicalRecordSegment;
  rdfs:range cdi:LogicalRecord;
.


# class PhysicalRecordSegmentPosition
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalRecordSegmentPosition
cdi:PhysicalRecordSegmentPosition
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalRecordSegmentPosition";
  rdfs:comment "Definition \n============ \nAssigns a position of the physical record segment within the whole physical record. For example in what order does this 80 character segment fall within an 800 character record."@en;
  
.

cdi:PhysicalRecordSegmentPosition-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalRecordSegmentPosition;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalRecordSegmentPosition-value
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "value";
  rdfs:comment "Index value of the member in an ordered array."@en;
  rdfs:domain cdi:PhysicalRecordSegmentPosition;
  rdfs:range xsd:integer;
.


cdi:PhysicalRecordSegmentPosition_indexes_PhysicalRecordSegment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "indexes";
  skos:altLabel "PhysicalRecordSegmentPosition_indexes_PhysicalRecordSegment";
  rdfs:comment "Assigns a position to a physical record segment within a physical record."@en;
  rdfs:domain cdi:PhysicalRecordSegmentPosition;
  rdfs:range cdi:PhysicalRecordSegment;
.


# class PhysicalRecordSegmentRelationship
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalRecordSegmentRelationship
cdi:PhysicalRecordSegmentRelationship
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalRecordSegmentRelationship";
  rdfs:comment "Definition\n============\nStructured relationship between physical record segments."@en;
  
.

cdi:PhysicalRecordSegmentRelationship-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalRecordSegmentRelationship;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalRecordSegmentRelationship-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:PhysicalRecordSegmentRelationship;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:PhysicalRecordSegmentRelationship_hasSource_PhysicalRecordSegment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSource";
  skos:altLabel "PhysicalRecordSegmentRelationship_hasSource_PhysicalRecordSegment";
  
  rdfs:domain cdi:PhysicalRecordSegmentRelationship;
  rdfs:range cdi:PhysicalRecordSegment;
.

cdi:PhysicalRecordSegmentRelationship_hasTarget_PhysicalRecordSegment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasTarget";
  skos:altLabel "PhysicalRecordSegmentRelationship_hasTarget_PhysicalRecordSegment";
  
  rdfs:domain cdi:PhysicalRecordSegmentRelationship;
  rdfs:range cdi:PhysicalRecordSegment;
.


# class PhysicalRecordSegmentStructure
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalRecordSegmentStructure
cdi:PhysicalRecordSegmentStructure
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalRecordSegmentStructure";
  rdfs:comment "Definition\n============\nMeans for describing the complex relational structure of data points in a physical record representing the logical record."@en;
  
.

cdi:PhysicalRecordSegmentStructure-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalRecordSegmentStructure-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "A linguistic signifier. Human understandable name (word, phrase, or mnemonic) that reflects the ISO/IEC 11179-5 naming principles."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalRecordSegmentStructure-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalRecordSegmentStructure-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalRecordSegmentStructure-specification
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "specification";
  rdfs:comment "Provides information on reflexivity, transitivity, and symmetry of relationship using a descriptive term from an enumerated list. Use if all relations within this relation structure are of the same specification."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:StructureSpecification;
.

cdi:PhysicalRecordSegmentStructure-topology
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "topology";
  rdfs:comment "Indicates the form of the associations among members of the collection. Specifies the way in which constituent parts are interrelated or arranged."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalRecordSegmentStructure-totality
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "totality";
  rdfs:comment "Indicates whether the related collections are comprehensive in terms of their coverage."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:StructureExtent;
.


cdi:PhysicalRecordSegmentStructure_has_DataPointRelationship
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalRecordSegmentStructure_has_DataPointRelationship";
  rdfs:comment "PhysicalRecordSegmentStructure has zero to many DataPointRelationships."@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:DataPointRelationship;
.

cdi:PhysicalRecordSegmentStructure_structures_PhysicalRecordSegment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "structures";
  skos:altLabel "PhysicalRecordSegmentStructure_structures_PhysicalRecordSegment";
  rdfs:comment "There may be cases where there is a more complex structure to a sequence of data points. A cell containing a list, for example, might be considered to have nested data points that are the elements of the list. (For simplicity's sake, each element of the list should be modeled as a data point if this is possible.)"@en;
  rdfs:domain cdi:PhysicalRecordSegmentStructure;
  rdfs:range cdi:PhysicalRecordSegment;
.


# class PhysicalSegmentLayout
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalSegmentLayout
cdi:PhysicalSegmentLayout
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalSegmentLayout";
  rdfs:comment "Definition \n============ \nUsed as an extension point in the description of the different layout styles of data structure descriptions.  \n\nExamples \n========== \nExamples include unit segment layouts, event data layouts, and cube layouts (e.g. summary data).  \n\nExplanatory notes \n=================== \nA physical segment layout is a physical description (e.g. unit segment layout) of the associated logical record Layout consisting of a collection of value mappings describing the physical interrelationship of each related value mapping and associated instance variable."@en;
  
.

cdi:PhysicalSegmentLayout-allowsDuplicates
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "allowsDuplicates";
  rdfs:comment "If value is False, the members are unique within the collection - if True, there may be duplicates. (Note that a mathematical “bag” permits duplicates and is unordered - a “set” does not have duplicates and may be ordered.)"@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-arrayBase
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "arrayBase";
  rdfs:comment "The starting value for the numbering of cells, rows, columns, etc. when they constitute an ordered sequence (an array). Note that in DDI, this is typically either 0 or 1. In related W3C work (Model for Tabular Data and Metadata on the Web), they appear to standardize on 1 (see https://www.w3.org/TR/tabular-data-model/ 4.3 [Columns] and 4.4 [Rows]: \"number - the position of the column amongst the columns for the associated table, starting from 1.\")"@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:integer;
.

cdi:PhysicalSegmentLayout-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. \n\nExamples would be creator, contributor, title, copyright, embargo, and license information\n\nA set of information useful for attribution, data discovery, and access.\nThis is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:CatalogDetails;
.

cdi:PhysicalSegmentLayout-commentPrefix
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "commentPrefix";
  rdfs:comment "A string used to indicate that an input line is a comment, a string which precedes a comment in the data file. From https://www.w3.org/TR/tabular-metadata/ 5.9 Dialect  commentPrefix: 'An atomic property that sets the comment prefix flag to the single provided value, which MUST be a string. The default is \"#\".'"@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-delimiter
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "delimiter";
  rdfs:comment "The Delimiting character in the data. Must be used if isDelimited is True. \"The separator between cells, set by the delimiter property of a dialect description. The default is ,. See the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-data-model/#encoding). From the \"CSV Dialect\" specification (https://specs.frictionlessdata.io/csv-dialect/#specification): \"delimiter: specifies a one-character string to use as the field separator. Default = ,.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-encoding
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "encoding";
  rdfs:comment "The character encoding of the represented data. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"encoding - An atomic property that sets the encoding flag to the single provided string value, which MUST be a defined in [encoding]. The default is 'utf-8'.\" From the same W3C recommendation 7.2 Encoding: \"CSV files should be encoded using UTF-8, and should be in Unicode Normal Form C as defined in [UAX15]. If a CSV file is not encoded using UTF-8, the encoding should be specified through the charset parameter in the Content-Type header.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:PhysicalSegmentLayout-escapeCharacter
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "escapeCharacter";
  rdfs:comment "\"The string that is used to escape the quote character within escaped cells, or null\" see https://www.w3.org/TR/tabular-data-model/#encoding. From https://www.w3.org/TR/tabular-metadata/ 5.9 Dialect \"doubleQuote: A boolean atomic property that, if true, sets the escape character flag to \". If false, to \\. The default is true.\" From http://specs.frictionlessdata.io/csv-dialect/ \"doubleQuote: controls the handling of quotes inside fields. If true, two consecutive quotes should be interpreted as one. Default = true\"."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-hasHeader
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "hasHeader";
  rdfs:comment "True if the file contains a header containing column names. From https://www.w3.org/TR/tabular-metadata/ 5.9 Dialect \"header: A boolean atomic property that, if true, sets the header row count flag to 1, and if false to 0, unless headerRowCount is provided, in which case the value provided for the header property is ignored. The default is true.\" From http://specs.frictionlessdata.io/csv-dialect/ \"header: indicates whether the file includes a header row. If true the first row in the file is a header row, not data. Default = true\"."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-headerIsCaseSensitive
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "headerIsCaseSensitive";
  rdfs:comment "If True, the case of the labels in the header is significant. From the \"CSV Dialect\" specification (http://specs.frictionlessdata.io/csv-dialect/): \"caseSensitiveHeader: indicates that case in the header is meaningful. For example, columns CAT and Cat should not be equated. Default = false.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-headerRowCount
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "headerRowCount";
  rdfs:comment "The number of lines in the header From https://www.w3.org/TR/tabular-metadata/ 5.9 Dialect \"headerRowCount: A numeric atomic property that sets the header row count flag to the single provided value, which MUST be a non-negative integer. The default is 1.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:integer;
.

cdi:PhysicalSegmentLayout-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:Identifier;
.

cdi:PhysicalSegmentLayout-isDelimited
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "isDelimited";
  rdfs:comment "Indicates whether the data are in a delimited format. If \"true,\" the format is delimited, and the isFixedWidth property must be set to \"false.\" If not set to \"true,\" the property isFixedWitdh must be set to \"true.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-isFixedWidth
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "isFixedWidth";
  rdfs:comment "Set to true if the file is fixed-width. If true, isDelimited must be set to false."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-lineTerminator
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "lineTerminator";
  rdfs:comment "The strings that can be used at the end of a row, set by the lineTerminators property of a dialect description. The default is [CRLF, LF]. See the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-data-model/#encoding) 5.9 Dialect \"lineTerminators: An atomic property that sets the line terminators flag to either an array containing the single provided string value, or the provided array. The default is ['rn', 'n'].\" Also, from the \"CSV Dialect\" specification (http://specs.frictionlessdata.io/csv-dialect/): \"lineTerminator: specifies the character sequence which should terminate rows. Default = rn.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "A linguistic signifier. Human understandable name (word, phrase, or mnemonic) that reflects the ISO/IEC 11179-5 naming principles. If more than one name is provided provide a context to differentiate usage."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:ObjectName;
.

cdi:PhysicalSegmentLayout-nullSequence
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "nullSequence";
  rdfs:comment "A string indicating a null value. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 4.3: \"null: the string or strings which cause the value of cells having string value matching any of these values to be null.\" From the same source, Inherited 5.7: \"null: An atomic property giving the string or strings used for null values within the data. If the string value of the cell is equal to any one of these values, the cell value is null. See Parsing Cells in [tabular-data-model] for more details. If not specified, the default for the null property is the empty string ''. The value of this property becomes the null annotation for the described column.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-overview
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "overview";
  rdfs:comment "Short natural language account of the information obtained from the combination of properties and relationships associated with an object."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalSegmentLayout-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:InternationalString;
.

cdi:PhysicalSegmentLayout-quoteCharacter
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "quoteCharacter";
  rdfs:comment "\"The string that is used around escaped cells, or null, set by the quoteChar property of a dialect description. The default is \".\". See W3C Recommendation \"Model for Tabular Data and Metadata on the Web\", https://www.w3.org/TR/tabular-data-model/#parsing. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"quoteChar: An atomic property that sets the quote character flag to the single provided value, which MUST be a string or null. If the value is null, the escape character flag is also set to null. The default is '\"'.\" From the CSV Dialect specification (http://specs.frictionlessdata.io/csv-dialect/): \"quoteChar: specifies a one-character string to use as the quoting character. Default = \".\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:string;
.

cdi:PhysicalSegmentLayout-skipBlankRows
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "skipBlankRows";
  rdfs:comment "If the value is True, blank rows are ignored. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"skipBlankRows: A boolean atomic property that sets the skip blank rows flag to the single provided boolean value. The default is false.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-skipDataColumns
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "skipDataColumns";
  rdfs:comment "The number of columns to skip at the beginning of the row. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"skipColumns: A numeric atomic property that sets the skip columns flag to the single provided numeric value, which MUST be a non-negative integer. The default is 0.\" A value other than 0 will mean that the source numbers of columns will be different from their numbers."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:integer;
.

cdi:PhysicalSegmentLayout-skipInitialSpace
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "skipInitialSpace";
  rdfs:comment "If the value is True, skip whitespace at the beginning of a line or following a delimiter. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"skipInitialSpace: A boolean atomic property that, if true, sets the trim flag to 'start' and if false, to false. If the trim property is provided, the skipInitialSpace property is ignored. The default is false.\" From the CSV Dialect specification (http://specs.frictionlessdata.io/csv-dialect/): \"skipInitialSpace: specifies how to interpret whitespace which immediately follows a delimiter; if false, it means that whitespace immediately after a delimiter should be treated as part of the following field. Default = true.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-skipRows
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "skipRows";
  rdfs:comment "Number of input rows to skip preceding the header or data. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"skipRows: A numeric atomic property that sets the skip rows flag to the single provided numeric value, which MUST be a non-negative integer. The default is 0.\" A value greater than 0 will mean that the source numbers of rows will be different from their numbers."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:integer;
.

cdi:PhysicalSegmentLayout-tableDirection
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "tableDirection";
  rdfs:comment "Indicates the direction in which columns are arranged in each row. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/)  5.3.2: \"tableDirection: An atomic property that MUST have a single string value that is one of 'rtl', 'ltr', or 'auto'. Indicates whether the tables in the group should be displayed with the first column on the right, on the left, or based on the first character in the table that has a specific direction. The value of this property becomes the value of the table direction annotation for all the tables in the table group. See Bidirectional Tables in [tabular-data-model] for details. The default value for this property is 'auto'.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:TableDirectionValues;
.

cdi:PhysicalSegmentLayout-textDirection
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "textDirection";
  rdfs:comment "Indicates the reading order of text within cells. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) Inherited 5.7: \"textDirection: An atomic property that MUST have a single string value that is one of 'ltr', 'rtl', 'auto' or 'inherit' (the default). Indicates whether the text within cells should be displayed as left-to-right text (ltr), as right-to-left text (rtl), according to the content of the cell (auto) or in the direction inherited from the table direction annotation of the table. The value of this property determines the text direction annotation for the column, and the text direction annotation for the cells within that column: if the value is inherit then the value of the text direction annotation is the value of the table direction annotation on the table, otherwise it is the value of this property. See Bidirectional Tables in [tabular-data-model] for details.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:TextDirectionValues;
.

cdi:PhysicalSegmentLayout-treatConsecutiveDelimitersAsOne
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "treatConsecutiveDelimitersAsOne";
  rdfs:comment "If the value is True, consecutive (adjacent) delimiters are treated as a single delimiter; if the value is False consecutive (adjacent) delimiters indicate a missing value."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range xsd:boolean;
.

cdi:PhysicalSegmentLayout-trim
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "trim";
  rdfs:comment "Specifies which spaces to remove from a data value (start, end, both, neither) From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.9 Dialect: \"trim: An atomic property that, if the boolean true, sets the trim flag to true and if the boolean false to false. If the value provided is a string, sets the trim flag to the provided value, which MUST be one of 'true', 'false', 'start', or 'end'. The default is true.\""@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:TrimValues;
.


cdi:PhysicalSegmentLayout_isDefinedBy_Concept
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isDefinedBy";
  skos:altLabel "PhysicalSegmentLayout_isDefinedBy_Concept";
  rdfs:comment "The conceptual basis for the collection of members."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:Concept;
.

cdi:PhysicalSegmentLayout_formats_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "formats";
  skos:altLabel "PhysicalSegmentLayout_formats_LogicalRecord";
  rdfs:comment "Logical record physically represented by the physical layout."@en;
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:LogicalRecord;
.

cdi:PhysicalSegmentLayout_has_ValueMapping
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalSegmentLayout_has_ValueMapping";
  
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:ValueMapping;
.

cdi:PhysicalSegmentLayout_has_ValueMappingPosition
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "PhysicalSegmentLayout_has_ValueMappingPosition";
  
  rdfs:domain cdi:PhysicalSegmentLayout;
  rdfs:range cdi:ValueMappingPosition;
.


# class PhysicalSegmentLocation
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalSegmentLocation
cdi:PhysicalSegmentLocation
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "PhysicalSegmentLocation";
  rdfs:comment "Definition \n============ \nLocation of a data point in a physical segment.  \n\nExamples \n========== \nA segment of text in a plain text file beginning at character 3 and ending at character 123. The location of the representation of a variable in a text file.  \n\nExplanatory notes \n=================== \nWhile this has no properties or relationships of its own, it is useful as a target of relationships where its extensions may serve. This is an extension point since there are many different ways to describe the location of a segment - character counts, start and end times, etc."@en;
  
.

cdi:PhysicalSegmentLocation-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. \n\nExamples would be creator, contributor, title, copyright, embargo, and license information\n\nA set of information useful for attribution, data discovery, and access.\nThis is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:PhysicalSegmentLocation;
  rdfs:range cdi:CatalogDetails;
.

cdi:PhysicalSegmentLocation-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:PhysicalSegmentLocation;
  rdfs:range cdi:Identifier;
.



# class RecordRelation
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::RecordRelation
cdi:RecordRelation
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "RecordRelation";
  rdfs:comment "Definition\n============\nRelationships among record types within and between logical records.\n\nExamples\n==========\nOne logical record containing a PersonIdentifier and a PersonName and another logical record containing a MeasurementID, a PersonID, a SystolicPressure, and a DiastolicPressure could be linked by a record relation. The record relation could employ an instance variable value map to describe the linkage between  PersonIdentifier and PersonID.\n\nA household-level logical record might contain an instance variable called HouseholdID and a person-level logical record might contain an instance variable called HID. Describing a link between HouseholdID and HID would allow the linking of a person-level LogicalRecord to their corresponding household-level logical record.\n\nExplanatory notes\n===================\nFor instance variables existing in a logical record with multiple record layouts, pairs of instance variables may function as paired keys to permit the expression of hierarchical links between records of different types. These links between keys in different record types could also be used to link records in a relational structure."@en;
  
.

cdi:RecordRelation-catalogDetails
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "catalogDetails";
  rdfs:comment "Bundles the information useful for a data catalog entry. \n\nExamples would be creator, contributor, title, copyright, embargo, and license information\n\nA set of information useful for attribution, data discovery, and access.\nThis is information that is tied to the identity of the object. If this information changes the version of the associated object changes."@en;
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:CatalogDetails;
.

cdi:RecordRelation-displayLabel
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "displayLabel";
  rdfs:comment "A human-readable display label for the object. Supports the use of multiple languages. Repeat for labels with different content, for example, labels with differing length limitations."@en;
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:LabelForDisplay;
.

cdi:RecordRelation-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:Identifier;
.

cdi:RecordRelation-purpose
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "purpose";
  rdfs:comment "Intent or reason for the object/the description of the object."@en;
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:InternationalString;
.

cdi:RecordRelation-usage
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "usage";
  rdfs:comment "Explanation of the ways in which the object is employed."@en;
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:InternationalString;
.


cdi:RecordRelation_has_InstanceVariableMap
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "RecordRelation_has_InstanceVariableMap";
  
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:InstanceVariableMap;
.

cdi:RecordRelation_maps_LogicalRecord
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "maps";
  skos:altLabel "RecordRelation_maps_LogicalRecord";
  
  rdfs:domain cdi:RecordRelation;
  rdfs:range cdi:LogicalRecord;
.


# class SegmentByText
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::SegmentByText
cdi:SegmentByText
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "SegmentByText";
  rdfs:comment "Definition \n============ \nLocation of a segment of text through character or line counts.  \n\nExamples \n========== \nThe segment beginning at line 3, character 4 and ending at line 27 character 13. Alternatively the segment beginning at character 257 and ending at character 1350 of the whole body of text. StartLine of 10, endLine of 12, startCharacterPosition of 1, endCharacterPosition of 0 means all of lines 10, 11, and 12.  An endCharacterPosition of 0 indicates that whole lines are specified.  \n\nExplanatory notes \n=================== \nAn adequate description will always include a startCharacterPosition and then may include an endCharacterPosition or a characterLength. If StartLine is specified, the character counts begin within that line."@en;
  rdfs:subClassOf cdi:PhysicalSegmentLocation;
.

cdi:SegmentByText-characterLength
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "characterLength";
  rdfs:comment "The number of characters in the segment. The segment may include text from multiple lines of the resource. If it does, the length includes any line termination characters."@en;
  rdfs:domain cdi:SegmentByText;
  rdfs:range xsd:integer;
.

cdi:SegmentByText-endCharacterPosition
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "endCharacterPosition";
  rdfs:comment "The character position of the last character of the segment.  If endLine is specified, the count begins at character 1 of endLine. If startLine and endLine are not specified, the count begins at character 1 of the first line of the resource and the count includes any line termination characters. The resulting segment may include text from multiple lines of the resource."@en;
  rdfs:domain cdi:SegmentByText;
  rdfs:range xsd:integer;
.

cdi:SegmentByText-endLine
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "endLine";
  rdfs:comment "The last line on which to count characters. If missing this defaults to startLine."@en;
  rdfs:domain cdi:SegmentByText;
  rdfs:range xsd:integer;
.

cdi:SegmentByText-startCharacterPosition
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "startCharacterPosition";
  rdfs:comment "The character position of the first character of the segment, with the count beginning at character 1 of startLine."@en;
  rdfs:domain cdi:SegmentByText;
  rdfs:range xsd:integer;
.

cdi:SegmentByText-startLine
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "startLine";
  rdfs:comment "The line number, where 1 is the first line, on which to begin counting characters. If missing this defaults to 1 (the first line)."@en;
  rdfs:domain cdi:SegmentByText;
  rdfs:range xsd:integer;
.



# class UnitSegmentLayout
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::UnitSegmentLayout
cdi:UnitSegmentLayout
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "UnitSegmentLayout";
  rdfs:comment "Definition\n==========\nDescription of unit-record (\"wide\") data sets, where each row in the data set provides the same group of values for variables all relating to a single unit.\n\nExamples\n========\nA simple spreadsheet. Commonly the first row of the table will contain variable names or descriptions.\n\nThe following CSV file has a rectangular layout and would import into a simple table in a spreadsheet::\n\n   PersonId,AgeYr,HeightCm\n   1,22,183,\n   2,45,175,\n\nExplanatory notes\n=================\nThis is the classic rectangular data table used by most statistical packages, with rows/cases/observations and columns/variables/measurements. Each cell (DataPoint) in the table is the intersection of a Unit (row) and an InstanceVariable. Each logical column will contain data relating to the values for a single variable."@en;
  rdfs:subClassOf cdi:PhysicalSegmentLayout;
.



# class ValueMapping
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::ValueMapping
cdi:ValueMapping
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ValueMapping";
  rdfs:comment "Definition \n==========\nPhysical characteristics for the value of an instance variable stored in a data point as part of a physical segment layout.\n\nExamples \n========\nA variable \"age\" might be represented in a file as a string with a maximum length of 5 characters and a number pattern of ##0.0  \n\nExplanatory notes \n=================\nAn instance variable has details of value domain and data type, but will not have the final details of how a value is physically represented in a data file. A variable for height, for example, may be represented as a real number, but may be represented as a string in multiple ways. The decimal separator might be, for example a period or a comma. The string representing the value of a payment might be preceded by a currency symbol. The same numeric value might be written as \"1,234,567\" or \"1.234567\". A missing value might be written as \".\", \"NA\", \".R\" or as \"R\". The value mapping describes how the value of an instance variable is physically expressed. The properties of the value mapping as intended to be compatible with the W3C Metadata Vocabulary for Tabular Data (https://www.w3.org/TR/tabular-metadata/) as well as common programming languages and statistical packages. The 'format' property, for example, can draw from an external controlled vocabulary such as the set of formats for Stata, SPSS, or SAS."@en;
  
.

cdi:ValueMapping-decimalPositions
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "decimalPositions";
  rdfs:comment "The number of decimal positions expressed as an integer. Used when the decimal position is implied (no decimal separator is present) See DDI 3.2 ManagedNumericRepresentation_decimalPositions"@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:integer;
.

cdi:ValueMapping-defaultDecimalSeparator
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "defaultDecimalSeparator";
  rdfs:comment "Default value is \".\" (period). The character separating the integer part from the fractional part of a decimal or real number. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 6.4.2: \"decimalChar: A string whose value is used to represent a decimal point within the number. If the supplied value is not a string, implementations MUST issue a warning and proceed as if the property had not been specified.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:string;
.

cdi:ValueMapping-defaultDigitGroupSeparator
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "defaultDigitGroupSeparator";
  rdfs:comment "Default value is null. A character separating groups of digits (for readability). In W3C part of the datatype format From https://www.w3.org/TR/tabular-metadata/ tabular 6.4.2 groupChar: \"A string whose value is used to group digits within the number. If the supplied value is not a string, implementations MUST issue a warning and proceed as if the property had not been specified.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:string;
.

cdi:ValueMapping-defaultValue
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "defaultValue";
  rdfs:comment "A default string indicating the value to substitute for an empty string. From https://www.w3.org/TR/tabular-metadata/ Inherited 5.7  \"default - An atomic property holding a single string that is used to create a default value for the cell in cases where the original string value is an empty string. See Parsing Cells in [tabular-data-model] for more details. If not specified, the default for the default property is the empty string, \"\". The value of this property becomes the default annotation for the described column.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:string;
.

cdi:ValueMapping-format
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "format";
  rdfs:comment "This defines the format of the physical representation of the value. From https://www.w3.org/TR/tabular-metadata/ 5.11.2 format: \"An atomic property that contains either a single string or an object that defines the format of a value of this type, used when parsing a string value as described in Parsing Cells in [tabular-data-model]. The value of this property becomes the format annotation for the described datatype.\" See https://www.w3.org/TR/tabular-metadata/ Tabular 6.4.2 \"Formats for numeric datatypes\" this may include decimalChar, groupChar, pattern \"By default, numeric values must be in the formats defined in [xmlschema11-2]. It is not uncommon for numbers within tabular data to be formatted for human consumption, which may involve using commas for decimal points, grouping digits in the number using commas, or adding percent signs to the number.\" See https://www.w3.org/TR/tabular-metadata/ Tabular 6.4. Formats for Booleans \" Boolean values may be represented in many ways aside from the standard 1 and 0 or true and false.\" See https://www.w3.org/TR/tabular-metadata/ 6.4.4. Formats for dates and times \"By default, dates and times are assumed to be in the format defined in [xmlschema11-2]. However dates and times are commonly represented in tabular data in other formats.\" See https://www.w3.org/TR/tabular-metadata/ 6.4.5 Formats for durations \"Durations MUST be formatted and interpreted as defined in [xmlschema11-2], using the [ISO8601] format -?PnYnMnDTnHnMnS. For example, the duration P1Y1D is used for a year and a day; the duration PT2H30M for 2 hours and 30 minutes.\" See https://www.w3.org/TR/tabular-metadata/ 6.4.6 Formats for other types \"If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values, with syntax and processing defined by [ECMASCRIPT]. If the supplied value is not a valid regular expression, implementations MUST issue a warning and proceed as if no format had been provided.\" From DDI3.2 ManagedNumericRepresentation@format \"A format for number expressed as a string.\" From DDI3.2 ManagedDateTimeRepresentation_DateFieldFormat \"Describes the format of the date field, in formats such as YYYY/MM or MM-DD-YY, etc. If this element is omitted, then the format is assumed to be the XML Schema format corresponding to the type attribute value.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:ValueMapping-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range cdi:Identifier;
.

cdi:ValueMapping-isRequired
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "isRequired";
  rdfs:comment "If the value of this property is True indicates that a value is required for the referenced instance variable. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.7 Inherited Properties: \"required: A boolean atomic property taking a single value which indicates whether the cell value can be null. See Parsing Cells in [tabular-data-model] for more details. The default is false, which means cells can have null values. The value of this property becomes the required annotation for the described column.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:boolean;
.

cdi:ValueMapping-length
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "length";
  rdfs:comment "The length in characters of the physical representation of the value. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/)  5.11.2 \"length: A numeric atomic property that contains a single integer that is the exact length of the value. The value of this property becomes the length annotation for the described datatype. See Length Constraints in [tabular-data-model] for details.\" Corresponds to DDI2.5 var/location/width and DDI 3.2 PhysicalLocation/Width."@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:integer;
.

cdi:ValueMapping-maximumLength
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "maximumLength";
  rdfs:comment "The largest possible value of the length of the physical representation of the value. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 5.11.2: \"maxLength: A numeric atomic property that contains a single integer that is the maximum length of the value. The value of this property becomes the maximum length annotation for the described datatype. See Length Constraints in [tabular-data-model] for details.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:integer;
.

cdi:ValueMapping-minimumLength
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "minimumLength";
  rdfs:comment "The smallest possible value for the length of the physical representation of the value. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/)  5.11.2: \"minLength: An atomic property that contains a single integer that is the minimum length of the value. The value of this property becomes the minimum length annotation for the described datatype. See Length Constraints in [tabular-data-model] for details.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:integer;
.

cdi:ValueMapping-nullSequence
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "nullSequence";
  rdfs:comment "A string indicating a null value. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) 4.3: \"null: the string or strings which cause the value of cells having string value matching any of these values to be null.\" From the same source, Inherited 5.7: \"null: An atomic property giving the string or strings used for null values within the data. If the string value of the cell is equal to any one of these values, the cell value is null. See Parsing Cells in [tabular-data-model] for more details. If not specified, the default for the null property is the empty string ''. The value of this property becomes the null annotation for the described column.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:string;
.

cdi:ValueMapping-numberPattern
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "numberPattern";
  rdfs:comment "A pattern description of the format of a numeric value. In W3C part of the datatype format From https://www.w3.org/TR/tabular-metadata/ tabular 6.4.2 pattern: \"A number format pattern as defined in [UAX35] http://www.unicode.org/reports/tr35/tr35-31/tr35-numbers.html#Number_Format_Patterns. Implementations MUST recognise number format patterns containing the symbols 0, #, the specified decimalChar (or \".\" if unspecified), the specified groupChar (or \",\" if unspecified), E, +, % and ‰. Implementations MAY additionally recognise number format patterns containing other special pattern characters defined in [UAX35]. If the supplied value is not a string, or if it contains an invalid number format pattern or uses special pattern characters that the implementation does not recognise, implementations MUST issue a warning and proceed as if the property had not been specified. If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string. If the groupChar is specified, but no pattern is supplied, when parsing the string value of a cell against this format specification, implementations MUST recognise and parse numbers that consist of: an optional + or - sign, …  Implementations MAY also recognise numeric values that are in any of the standard-decimal, standard-percent or standard-scientific formats listed in the Unicode Common Locale Data Repository. …\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:string;
.

cdi:ValueMapping-physicalDataType
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "physicalDataType";
  rdfs:comment "The base datatype of the physical representation. An integer InstanceVariable might, for example, be stored as a floating point number. From the W3C Recommendation \"Metadata Vocabulary for Tabular Data\" (https://www.w3.org/TR/tabular-metadata/) Inherited 5.7: \"datatype: An atomic property that contains either a single string that is the main datatype of the values of the cell or a datatype description object. If the value of this property is a string, it MUST be the name of one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes and this value is normalized to an object whose base property is the original string value. If it is an object then it describes a more specialized datatype. If a cell contains a sequence (i.e. the separator property is specified and not null) then this property specifies the datatype of each value within that sequence. See 5.11 Datatypes and Parsing Cells in [tabular-data-model] for more details.  The normalized value of this property becomes the datatype annotation for the described column.\""@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range cdi:ControlledVocabularyEntry;
.

cdi:ValueMapping-scale
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "scale";
  rdfs:comment "The scale of the number expressed as an integer. A multiplier to be used in combination with the value to determine the measurement. (E.g., a number expressed in 100's with a value of 5 and a scale of 100 would be 500)."@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range xsd:integer;
.


cdi:ValueMapping_formats_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "formats";
  skos:altLabel "ValueMapping_formats_DataPoint";
  
  rdfs:domain cdi:ValueMapping;
  rdfs:range cdi:DataPoint;
.

cdi:ValueMapping_uses_PhysicalSegmentLocation
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "uses";
  skos:altLabel "ValueMapping_uses_PhysicalSegmentLocation";
  rdfs:comment "Uses a physical segment location to describe where in the physical record a segment representing the data point is. This could be, for example, described as a start position and end position value for characters in a text record via the segment by text extension of physical segment location."@en;
  rdfs:domain cdi:ValueMapping;
  rdfs:range cdi:PhysicalSegmentLocation;
.


# class ValueMappingPosition
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::ValueMappingPosition
cdi:ValueMappingPosition
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ValueMappingPosition";
  rdfs:comment "Definition \n============ \nDenotes the position of a value mapping in a sequence."@en;
  
.

cdi:ValueMappingPosition-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:ValueMappingPosition;
  rdfs:range cdi:Identifier;
.

cdi:ValueMappingPosition-value
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "value";
  rdfs:comment "Index value of the member in an ordered array."@en;
  rdfs:domain cdi:ValueMappingPosition;
  rdfs:range xsd:integer;
.


cdi:ValueMappingPosition_indexes_ValueMapping
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "indexes";
  skos:altLabel "ValueMappingPosition_indexes_ValueMapping";
  rdfs:comment "Assigns a position to a value mapping within a physical segment."@en;
  rdfs:domain cdi:ValueMappingPosition;
  rdfs:range cdi:ValueMapping;
.


# class ValueMappingRelationship
# based on the UML class DDICDIModels::DDICDILibrary::Classes::FormatDescription::ValueMappingRelationship
cdi:ValueMappingRelationship
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ValueMappingRelationship";
  rdfs:comment "Definition \n============ \nRelationships among data points in a physical layout."@en;
  
.

cdi:ValueMappingRelationship-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:ValueMappingRelationship;
  rdfs:range cdi:Identifier;
.

cdi:ValueMappingRelationship-semantics
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "semantics";
  rdfs:comment "Specifies the semantics of the object in reference to a vocabulary, ontology, etc."@en;
  rdfs:domain cdi:ValueMappingRelationship;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:ValueMappingRelationship_hasSource_ValueMapping
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSource";
  skos:altLabel "ValueMappingRelationship_hasSource_ValueMapping";
  rdfs:comment "Specialization of source to variable mapping."@en;
  rdfs:domain cdi:ValueMappingRelationship;
  rdfs:range cdi:ValueMapping;
.

cdi:ValueMappingRelationship_hasTarget_ValueMapping
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasTarget";
  skos:altLabel "ValueMappingRelationship_hasTarget_ValueMapping";
  rdfs:comment "Specialization of target to variable mapping. Restricts cardinality."@en;
  rdfs:domain cdi:ValueMappingRelationship;
  rdfs:range cdi:ValueMapping;
.




