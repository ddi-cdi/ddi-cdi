# PLEASE DO NOT EDIT THIS CODE!
# This code was generated by the Eclipse Acceleo module UCMIS M2T on 2023-05-25 10:41:35.
# Target language is 'Ontology Turtle' ('onto.ttl') generated on the basis of the model 'DDICDIModels'.

# Ontology for Process
# based on the UML package DDICDIModels::DDICDILibrary::Classes::Process
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix ucmis: <http://example.org/TODO/ucmis/> .
@prefix cdi:   <http://ddialliance.org/Specification/DDI-CDI/1.0/RDF/> .

<Process.onto.ttl> a owl:Ontology;
  rdfs:label "Process";
  rdfs:comment "This package contains classes for describing the high-level processes and their substeps for linear (deterministic, imperative) and non-linear (non-deterministic, rule-based) processes."@en;
.

# class Activity
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Activity
cdi:Activity
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Activity";
  rdfs:comment "Definition \n============ \nAn activity is a task described at a conceptual level. It is not parameterized and as such is less reusable. For more logical/physical, fine-grained, reusable description there is a sub-type called step.  \n\nExamples \n========== \nPhases and sub-processes of the Generic Statistical Business Process Model (GSBPM) are examples of activity.  \n\nExplanatory notes \n=================== \nAn activity is invoked by control logic. It may use and/or produce information objects referenced with the entityUsed and entityProduced attributes."@en;
  
.

cdi:Activity-description
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "description";
  rdfs:comment "A description of the Activity in human-readable language."@en;
  rdfs:domain cdi:Activity;
  rdfs:range xsd:string;
.

cdi:Activity-entityProduced
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "entityProduced";
  rdfs:comment "The thing resulting from the activity."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Reference;
.

cdi:Activity-entityUsed
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "entityUsed";
  rdfs:comment "A thing employed in the activity."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Reference;
.

cdi:Activity-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Identifier;
.

cdi:Activity-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (linguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:ObjectName;
.

cdi:Activity-standardModelMapping
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "standardModelMapping";
  rdfs:comment "A reference to a standard process model from which the Activity is taken, such as The Generic Statistical Business Process Model (GSBPM), the Generic Longitudinal Business Process Model (GLBPM), Open Archive Information System (OAIS) model, etc. The model and step or sub-step corresponding to the Activity is noted here using the Paired External Controlled Vocabulary Entry. Enter the name of the model in \"term\" and the step, sub-step, or specific portion of the model in \"extent\"."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Reference;
.


cdi:Activity_has_Step
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "Activity_has_Step";
  rdfs:comment "Activities may be broken out into Steps. Steps are also a subtype of Activity."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Step;
.

cdi:Activity_hasInternal_ControlLogic
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasInternal";
  skos:altLabel "Activity_hasInternal_ControlLogic";
  rdfs:comment "An activity is embedded in the control construct which launches it."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:ControlLogic;
.

cdi:Activity_hasSubActivity_Activity
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSubActivity";
  skos:altLabel "Activity_hasSubActivity_Activity";
  rdfs:comment "An Activity is a container for SubActivities."@en;
  rdfs:domain cdi:Activity;
  rdfs:range cdi:Activity;
.


# class AllenIntervalAlgebra
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::AllenIntervalAlgebra
cdi:AllenIntervalAlgebra
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "AllenIntervalAlgebra";
  rdfs:comment "Definition \n==========\nControl logic where the execution flow is determined by the satisfaction of temporal constraints specified with Allen's Interval Algebra over time intervals. Allen's interval algebra consists of thirteen temporal interval relations and the operations defined on them. Together these relations are distinct (any pair of definite intervals are described by one and only one of the relations), exhaustive (any pair of definite intervals are described by one of the relations), and qualitative (no numeric time spans are considered). See https://www.ics.uci.edu/~alspaugh/cls/shr/allen.html.\n\nExamples\n========\nAn Allen overlap indicates that within a sequence two procedures overlap in time. \n\nExplanatory notes\n=================\nAllen's intervals are pairwise."@en;
  rdfs:subClassOf cdi:TemporalConstraints;
.

cdi:AllenIntervalAlgebra-temporalIntervalRelation
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "temporalIntervalRelation";
  rdfs:comment "Temporal constraint specified as an Allen's interval relation."@en;
  rdfs:domain cdi:AllenIntervalAlgebra;
  rdfs:range cdi:TemporalRelation;
.



# class ConditionalControlLogic
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::ConditionalControlLogic
cdi:ConditionalControlLogic
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ConditionalControlLogic";
  rdfs:comment "Definition \n============ \nA set of decision points which determine the flow between the steps used to perform an activity. \n\nExamples \n========== \nLoop, IfThenElse, RepeatWhile, etc."@en;
  rdfs:subClassOf cdi:DeterministicImperative;
.

cdi:ConditionalControlLogic-condition
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "condition";
  rdfs:comment "A condition associated with the construct property of the ConditionalControlLogic. It is a logical expression which can be evaluated as either true or false to determine the specific execution of the associated  construct."@en;
  rdfs:domain cdi:ConditionalControlLogic;
  rdfs:range cdi:CommandCode;
.

cdi:ConditionalControlLogic-construct
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "construct";
  rdfs:comment "controlConstruct is an enumeration of type ControlConstructType. The enumeration consists of IfThen, Else, Loop, RepeatUntil and RepeatWhile."@en;
  rdfs:domain cdi:ConditionalControlLogic;
  rdfs:range cdi:ControlConstruct;
.



# class ControlLogic
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic
cdi:ControlLogic
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ControlLogic";
  rdfs:comment "Definition \n============ \nControl logic is a program in which the order of statements is explicit. Control logic is either deterministic (imperative) or non-deterministic (declarative). Deterministic control logic consists of control constructs. Declarative control logic is constraint- and/or rule-based. Control logic may contain control logic.  \n\nExamples \n========== \nA loop control construct is deterministic control logic. A script is deterministic control logic. Rule based scheduling is declarative control logic.  \n\nExplanatory notes \n=================== \nDDI-CDI has extended control logic to include non-deterministic activity and step controls, which are not specifically described in DDI Lifecycle or DDI Codebook."@en;
  
.

cdi:ControlLogic-description
  a rdf:Property, owl:DatatypeProperty, ucmis:Attribute;
  rdfs:label "description";
  rdfs:comment "A desription of the control logic in human-readable language."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range xsd:string;
.

cdi:ControlLogic-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:Identifier;
.

cdi:ControlLogic-workflow
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "workflow";
  rdfs:comment "Reference to the system or standard from which the workflow was taken."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:ControlLogic_has_InformationFlowDefinition
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "ControlLogic_has_InformationFlowDefinition";
  rdfs:comment "A control construct has zero or more information flow definitions each of which provides the control construct with zero or more input and output parameters used or produced in the step/sub-step with which it is associated."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:InformationFlowDefinition;
.

cdi:ControlLogic_hasSubControlLogic_ControlLogic
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSubControlLogic";
  skos:altLabel "ControlLogic_hasSubControlLogic_ControlLogic";
  rdfs:comment "Control logic is a container of control logic which is in turn a container of control logic ad infinitum so that it is able to represent the structure of a program."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:ControlLogic;
.

cdi:ControlLogic_informs_ProcessingAgent
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "informs";
  skos:altLabel "ControlLogic_informs_ProcessingAgent";
  rdfs:comment "Control logic informs a processing agent. The information may be deterministic or non-deterministic."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:ProcessingAgent;
.

cdi:ControlLogic_invokes_Activity
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "invokes";
  skos:altLabel "ControlLogic_invokes_Activity";
  rdfs:comment "Control logic invokes an activity deterministically (either conditionally or unconditionally) or non-derministically (based on temporal constraints or rule-based scheduling)."@en;
  rdfs:domain cdi:ControlLogic;
  rdfs:range cdi:Activity;
.


# class Curator
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Curator
cdi:Curator
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Curator";
  rdfs:comment "Definition \n============ \nCurator is a software agent that uses techniques such as natural language processing to map facts in the research data store to the condition part of a rule.  \n\nExamples \n========== \nDomain-specific curators are available as both open source and commercial products.   \n\nExplanatory notes \n=================== \nThe curator assists in identifying the rules that are currently in play in the rule set."@en;
  rdfs:subClassOf cdi:ProcessingAgent;
.



# class DeterministicImperative
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::DeterministicImperative
cdi:DeterministicImperative
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "DeterministicImperative";
  rdfs:comment "Definition \n============ \nDeterministic imperative is a subtype of control logic. Deterministic control logic consists of control constructs.   \n\nExamples \n========== \nA Loop control construct is deterministic control logic. A script is deterministic control logic.  \n\nExplanatory notes \n=================== \nBecause control logic covers both deterministic and non-deterministic forms, it has been divided into the appropriate subtypes."@en;
  rdfs:subClassOf cdi:ControlLogic;
.



# class InformationFlowDefinition
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::InformationFlowDefinition
cdi:InformationFlowDefinition
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "InformationFlowDefinition";
  rdfs:comment "Definition \n============ \nThe relationships between parameters across steps is described by the information flow definition. Each relationship creates a pathway for an information object to follow.  \n\nExamples \n========== \nThe output of one parameter might be the input of another one. Think of a Business Process Model and Notation (BPMN) diagram or an extract, transform, and load (ETL) pipeline definition as the sum of these relationships.  \n\nExplanatory notes \n=================== \nIn DDI Lifecycle an information flow definition was referred to in terms of a \"binding\"."@en;
  
.

cdi:InformationFlowDefinition-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:InformationFlowDefinition;
  rdfs:range cdi:Identifier;
.


cdi:InformationFlowDefinition_from_Parameter
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "from";
  skos:altLabel "InformationFlowDefinition_from_Parameter";
  rdfs:comment "From parameters are the outputs from a control construct produced in its step/sub-step."@en;
  rdfs:domain cdi:InformationFlowDefinition;
  rdfs:range cdi:Parameter;
.

cdi:InformationFlowDefinition_to_Parameter
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "to";
  skos:altLabel "InformationFlowDefinition_to_Parameter";
  rdfs:comment "To parameters are the inputs to a control construct used in its step/sub-step."@en;
  rdfs:domain cdi:InformationFlowDefinition;
  rdfs:range cdi:Parameter;
.


# class NonDeterministicDeclarative
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::NonDeterministicDeclarative
cdi:NonDeterministicDeclarative
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "NonDeterministicDeclarative";
  rdfs:comment "Definition \n============ \nNon-deterministic control logic is a subtype of control logic. Non-deterministic (or declarative) control logic is constraint- and/or rule-based.  \n\nExamples \n========== \nRule based scheduling is declarative control logic.  \n\nExplanatory notes \n=================== \nUnlike DDI Lifecycle, DDI-CDI describes non-deterministic activity and step controls."@en;
  rdfs:subClassOf cdi:ControlLogic;
.



# class Parameter
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Parameter
cdi:Parameter
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Parameter";
  rdfs:comment "Definition \n============ \nAn input or output to control logic and the step/sub-step it invokes. Parameters may take the form of any information object, including data sets and structured metadata as well as configuration information for the step/sub-step.  \n\nExamples \n========== \nA dimensional data set; a long data structure."@en;
  
.

cdi:Parameter-entityBound
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "entityBound";
  rdfs:comment "Specification of the object being used as a parameter, typically as a reference to a class in the DDI-CDI model, but may also be a specific instance of a class."@en;
  rdfs:domain cdi:Parameter;
  rdfs:range cdi:Reference;
.

cdi:Parameter-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:Parameter;
  rdfs:range cdi:Identifier;
.

cdi:Parameter-name
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "name";
  rdfs:comment "Human understandable name (linguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage."@en;
  rdfs:domain cdi:Parameter;
  rdfs:range cdi:ObjectName;
.



# class ProcessingAgent
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::ProcessingAgent
cdi:ProcessingAgent
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ProcessingAgent";
  rdfs:comment "Definition \n============ \nA processing agent orchestrates the production of information objects in a production environment. There are processing agents which perform data capture, data editing/processing, and data analysis (etc.), each in the appropriate production environments. The processing agent performs an activity based on the control logic.  \n\nExamples \n========== \nA processing agent initiates a data capture sequence, obtaining readings from a sensor. A processing agent initiates rule based scheduling. A processing agent is informed by control logic to invoke an imputation activity."@en;
  rdfs:subClassOf cdi:Agent;
.


cdi:ProcessingAgent_operatesOn_ProductionEnvironment
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "operatesOn";
  skos:altLabel "ProcessingAgent_operatesOn_ProductionEnvironment";
  
  rdfs:domain cdi:ProcessingAgent;
  rdfs:range cdi:ProductionEnvironment;
.

cdi:ProcessingAgent_performs_Activity
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "performs";
  skos:altLabel "ProcessingAgent_performs_Activity";
  rdfs:comment "A processing agent performs an activity at the direction of control logic."@en;
  rdfs:domain cdi:ProcessingAgent;
  rdfs:range cdi:Activity;
.


# class ProductionEnvironment
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::ProductionEnvironment
cdi:ProductionEnvironment
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ProductionEnvironment";
  rdfs:comment "Definition \n============ \nProduction environments consume and produce information objects by way of processing pipelines orchestrated by the processing agent.  \n\nExamples \n========== \nData processing platforms and data analysis platforms are types of production environments. Each of these platforms may have subtypes."@en;
  
.

cdi:ProductionEnvironment-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:ProductionEnvironment;
  rdfs:range cdi:Identifier;
.



# class Rule
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Rule
cdi:Rule
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Rule";
  rdfs:comment "Definition \n============ \nA rule has a condition part and an action part. A rule takes the form of: If [Condition} Then [Action]. A rule belongs to a rule set which is a component of rule based scheduling performed by the processing agent  \n\nExamples \n========== \nIf Exists [InformationObject] Then Perform [Activity]"@en;
  
.

cdi:Rule-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:Rule;
  rdfs:range cdi:Identifier;
.


cdi:Rule_hasPrecondition_ConditionalControlLogic
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasPrecondition";
  skos:altLabel "Rule_hasPrecondition_ConditionalControlLogic";
  rdfs:comment "The condition part of a rule is associated with conditonal control logic."@en;
  rdfs:domain cdi:Rule;
  rdfs:range cdi:ConditionalControlLogic;
.


# class RuleBasedScheduling
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::RuleBasedScheduling
cdi:RuleBasedScheduling
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "RuleBasedScheduling";
  rdfs:comment "Definition \n============ \nRule based scheduling performs a fact check on rules from the rule set, testing their condition part against the facts in the research data store. Fact checking may be assisted by a curator who can semantically compare the condition part of each candidate rule with the facts. The fact checker returns the next activity which rule based scheduling performs according to the following function: factcheck (RuleSet, ResearchDataStore, Curator): Activity.\n\nExamples \n========== \nOne real-life situation in which rule-based scheduling is performed involves data virtualization. Here the research datastore has a catalog of views available for use. Rule based scheduling might explore the catalog to determine the rule(s) in the rule set that currently apply. A software curator might assist in the decision in case there was no exact match between a rule and its condition(s) and given the current state of the research datastore. The curator typically uses natural language processing. \n\nExplanatory notes \n=================== \nRule based scheduling is guided by its scheduling strategy. This is described by an enumeration that consists of \"forwardChaining\" and \"backwardChaining\"."@en;
  rdfs:subClassOf cdi:NonDeterministicDeclarative;
.

cdi:RuleBasedScheduling-schedulingType
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "schedulingType";
  rdfs:comment "Indicated if rule-based scheduling is forward-chaining or backward-chaining."@en;
  rdfs:domain cdi:RuleBasedScheduling;
  rdfs:range cdi:SchedulingStrategy;
.


cdi:RuleBasedScheduling_has_Curator
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "RuleBasedScheduling_has_Curator";
  rdfs:comment "Rule based scheduling has one or more curators. The curators may be commercial/off-the-shelf, open source and/or home grown. They are likely to be domain-specific which is why rule based scheduling might employ many."@en;
  rdfs:domain cdi:RuleBasedScheduling;
  rdfs:range cdi:Curator;
.

cdi:RuleBasedScheduling_has_RuleSet
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "RuleBasedScheduling_has_RuleSet";
  rdfs:comment "Rule sets are a component of rule based scheduling."@en;
  rdfs:domain cdi:RuleBasedScheduling;
  rdfs:range cdi:RuleSet;
.


# class RuleSet
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::RuleSet
cdi:RuleSet
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "RuleSet";
  rdfs:comment "Definition \n============ \nA rule set is a collection of rules. A rule set is a component of rule based scheduling.  \n\nExamples \n========== \nIf [A overlaps B] Then [X] If [B occurs before C] Then [Y] If [C equals D] Then [Z]  It might take a curator to understand what these rules mean in the context of a research data store.\n\nExplanatory notes \n=================== \nRule based scheduling might have multiple rule sets each of which are domain-specific. The processing agent often helps with the selection of rule sets."@en;
  
.

cdi:RuleSet-identifier
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "identifier";
  rdfs:comment "Identifier for objects requiring short- or long-lasting referencing and management."@en;
  rdfs:domain cdi:RuleSet;
  rdfs:range cdi:Identifier;
.


cdi:RuleSet_has_Rule
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "RuleSet_has_Rule";
  rdfs:comment "A rule is a member of a rule set."@en;
  rdfs:domain cdi:RuleSet;
  rdfs:range cdi:Rule;
.


# class Sequence
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Sequence
cdi:Sequence
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Sequence";
  rdfs:comment "Definition \n============ \nA sequence controls the order of activities or steps by defining a simple sequence. \n\nExamples \n========== \nA sequence might contain two subordinate sequences of activity - one for Round 1 activity of the research and the second for Round 2.\n\nExplanatory notes \n=================== \nUnlike temporal constraints, sequence is NOT pairwise. However, a group of temporal constraints can specify an order with more precision than a sequence."@en;
  rdfs:subClassOf cdi:DeterministicImperative;
.



# class Service
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Service
cdi:Service
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Service";
  rdfs:comment "Definition \n============ \nService is a type of processing agent. Services are atomic. They execute acts which have input and output parameters.  \n\nExamples \n========== \nGiven a location as input, a weather service provides weather data as output.  \n\nExplanatory notes \n=================== \nA service binds information objects to parameters at runtime."@en;
  rdfs:subClassOf cdi:ProcessingAgent;
.



# class Step
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::Step
cdi:Step
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "Step";
  rdfs:comment "Definition\n============\nStep is a reusable, parameterized activity associated to information flows. One or more steps perform an sctivity.\n\nExamples\n==========\nAn editing activity resolves into one or more steps. A transformation of a wide data set to a long data set takes a single step on an ETL (extract, transform, load) platform like Pentaho.\n\nExplanatory notes\n===================\nSteps can be broken out into a sequence of sub steps ad infinitum."@en;
  rdfs:subClassOf cdi:Activity;
.

cdi:Step-script
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "script";
  rdfs:comment "The executable code for performing a process step, expressed in a formal language."@en;
  rdfs:domain cdi:Step;
  rdfs:range cdi:CommandCode;
.

cdi:Step-scriptingLanguage
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "scriptingLanguage";
  rdfs:comment "The formal language used by the script associated with the process step."@en;
  rdfs:domain cdi:Step;
  rdfs:range cdi:ControlledVocabularyEntry;
.


cdi:Step_hasSubStep_Step
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasSubStep";
  skos:altLabel "Step_hasSubStep_Step";
  rdfs:comment "A step can be broken out into steps ad infinitum."@en;
  rdfs:domain cdi:Step;
  rdfs:range cdi:Step;
.

cdi:Step_produces_Parameter
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "produces";
  skos:altLabel "Step_produces_Parameter";
  rdfs:comment "The Step creates Parameter as an output."@en;
  rdfs:domain cdi:Step;
  rdfs:range cdi:Parameter;
.

cdi:Step_receives_Parameter
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "receives";
  skos:altLabel "Step_receives_Parameter";
  rdfs:comment "The Step uses Parameter as an input."@en;
  rdfs:domain cdi:Step;
  rdfs:range cdi:Parameter;
.


# class TemporalConstraints
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::TemporalConstraints
cdi:TemporalConstraints
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "TemporalConstraints";
  rdfs:comment "Definition\n============\nTemporal constraints provide a mechanism for expressing concurrency control and synchronization\n\nExamples\n==========\nAllen's Interval Algebra is a set of temporal constraints. So are the Split and SplitJoin ControlConstructs\n\nExplanatory notes\n===================\nAllen's interval algebra is a calculus for temporal reasoning that was introduced in 1983. Reasoning with qualitative time in Allen's full interval algebra is nondeterministic polynomial time (NP) complete. Research since 1995 identified maximal tractable subclasses of this algebra via exhaustive computer search and also other ad-hoc methods. In 2003, the full classification of complexity for satisfiability problems over constraints in Allen's interval algebra was established algebraically."@en;
  rdfs:subClassOf cdi:NonDeterministicDeclarative;
.



# class TemporalControlConstruct
# based on the UML class DDICDIModels::DDICDILibrary::Classes::Process::TemporalControlConstruct
cdi:TemporalControlConstruct
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "TemporalControlConstruct";
  rdfs:comment "Definition \n==========\nDeclarative control flow operator where the continuation of the execution flow depends on the finalization of one or more preceding activities/steps.\n\n- XORJoin: Given three activities A, B and C, if XORJoin(A, B) -> C, then C is executed after either A or B finishes executing. XORJoin is sometimes referred to as simple merge.\n- ANDJoin: Given three activities A, B and C, if ANDJoin(A, B) -> C, then C is executed after both A and B finish executing. ANDJoin is sometimes referred to as synchronization.\n- XORSplit: Given three activities A, B and C, if XORSplit(A) -> (B, C), then either B or C is executed, not both, after A finishes executing. XORSplit is sometimes referred to as exclusive choice.\n- ANDSplit: Given three activities A, B and C, if ANDSplit(A) -> (B, C), then both B and C are executed after A finishes executing."@en;
  rdfs:subClassOf cdi:TemporalConstraints;
.

cdi:TemporalControlConstruct-temporalControl
  a rdf:Property, owl:ObjectProperty, ucmis:Attribute;
  rdfs:label "temporalControl";
  rdfs:comment "TemporalControl is a property of type TemporalControlConstructType. There are four members of this enumeration: AND-split, XOR-split, AND-join and XOR-join."@en;
  rdfs:domain cdi:TemporalControlConstruct;
  rdfs:range cdi:TemporalOperator;
.





