# PLEASE DO NOT EDIT THIS CODE!
# This code was generated by the Eclipse Acceleo module UCMIS M2T on 2023-05-25 10:41:35.
# Target language is 'Ontology Turtle' ('onto.ttl') generated on the basis of the model 'DDICDIModels'.

# Ontology for Enumerations
# based on the UML package DDICDIModels::DDICDILibrary::DataTypes::Enumerations
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix ucmis: <http://example.org/TODO/ucmis/> .
@prefix cdi:   <http://ddialliance.org/Specification/DDI-CDI/1.0/RDF/> .

<Enumerations.onto.ttl> a owl:Ontology;
  rdfs:label "Enumerations";
  rdfs:comment "This package contains constructs for describing listed sets of values (enumerations)."@en;
.



# enumeration CategoryRelationCode
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::CategoryRelationCode
cdi:CategoryRelationCode
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "CategoryRelationCode";
  rdfs:comment "Definition\n============\nIndicates the type of relationship, nominal, ordinal, interval, ratio, or continuous. Use where appropriate for the representation type."@en;
  
.

cdi:Continuous
  a cdi:CategoryRelationCode;
  rdfs:label "Continuous";
  rdfs:comment "May be used to identify both interval and ratio classification levels, when more precise information is not available."@en;
.

cdi:Interval
  a cdi:CategoryRelationCode;
  rdfs:label "Interval";
  rdfs:comment "The categories in the domain are in rank order and have a consistent interval between each category so that differences between arbitrary pairs of measurements can be meaningfully compared."@en;
.

cdi:Nominal
  a cdi:CategoryRelationCode;
  rdfs:label "Nominal";
  rdfs:comment "A relationship of less than, or greater than, cannot be established among the included categories. This type of relationship is also called categorical or discrete."@en;
.

cdi:Ordinal
  a cdi:CategoryRelationCode;
  rdfs:label "Ordinal";
  rdfs:comment "The categories in the domain have a rank order."@en;
.

cdi:Ratio
  a cdi:CategoryRelationCode;
  rdfs:label "Ratio";
  rdfs:comment "The categories have all the features of interval measurement and also have meaningful ratios between arbitrary pairs of numbers."@en;
.


# enumeration ComparisonOperator
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::ComparisonOperator
cdi:ComparisonOperator
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "ComparisonOperator";
  rdfs:comment "Definition\n============\nDefines the relationship between values in key/value pair."@en;
  
.

cdi:Equal
  a cdi:ComparisonOperator;
  rdfs:label "Equal";
  rdfs:comment "The value the key's in the source and target must be equal."@en;
.

cdi:GreaterThan
  a cdi:ComparisonOperator;
  rdfs:label "GreaterThan";
  rdfs:comment "The value the key in the source must be greater than the key in the target."@en;
.

cdi:GreaterThanOrEqualTo
  a cdi:ComparisonOperator;
  rdfs:label "GreaterThanOrEqualTo";
  rdfs:comment "The value the key in the source must be greater than or equal to the key in the target."@en;
.

cdi:LessThan
  a cdi:ComparisonOperator;
  rdfs:label "LessThan";
  rdfs:comment "The value the key in the source must be less than the key in the target."@en;
.

cdi:LessThanOrEqualTo
  a cdi:ComparisonOperator;
  rdfs:label "LessThanOrEqualTo";
  rdfs:comment "The value the key in the source must be less than or equal to the key in the target."@en;
.

cdi:NotEqual
  a cdi:ComparisonOperator;
  rdfs:label "NotEqual";
  rdfs:comment "The value the key's in the source and target must be unequal."@en;
.


# enumeration ComputationBaseList
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::ComputationBaseList
cdi:ComputationBaseList
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "ComputationBaseList";
  rdfs:comment "Definition\n============\nDefines the cases included in determining the statistic."@en;
  
.

cdi:MissingOnly
  a cdi:ComputationBaseList;
  rdfs:label "MissingOnly";
  rdfs:comment "Only missing (invalid) cases included in the calculation."@en;
.

cdi:Total
  a cdi:ComputationBaseList;
  rdfs:label "Total";
  rdfs:comment "All cases, both valid and missing (invalid)."@en;
.

cdi:ValidOnly
  a cdi:ComputationBaseList;
  rdfs:label "ValidOnly";
  rdfs:comment "Only valid values, missing (invalid) are not included in the calculation."@en;
.


# enumeration ControlConstruct
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::ControlConstruct
cdi:ControlConstruct
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "ControlConstruct";
  rdfs:comment "Definition\n============\nType of control construct used by the conditional control logic related to an activity."@en;
  
.

cdi:Else
  a cdi:ControlConstruct;
  rdfs:label "Else";
  rdfs:comment "Describes an Else type of control construct."@en;
.

cdi:IfThen
  a cdi:ControlConstruct;
  rdfs:label "IfThen";
  rdfs:comment "Describes an IfThen type of control construct.  If the stated condition is met, the Then clause is triggered."@en;
.

cdi:Loop
  a cdi:ControlConstruct;
  rdfs:label "Loop";
  rdfs:comment "Describes a Loop type of control construct (loops until a limiting condition is met)."@en;
.

cdi:RepeatUntil
  a cdi:ControlConstruct;
  rdfs:label "RepeatUntil";
  rdfs:comment "Describes an RepeatUntil type of control construct (to be repeated until a specified condition is met)."@en;
.

cdi:RepeatWhile
  a cdi:ControlConstruct;
  rdfs:label "RepeatWhile";
  rdfs:comment "Describes a RepeatWhile type of control construct (to be repeated while a specified condition is met)."@en;
.


# enumeration MatchingCriterion
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::MatchingCriterion
cdi:MatchingCriterion
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "MatchingCriterion";
  rdfs:comment "Definition\n============\nSupports mapping comparative relationships by type of match. Not used for causative, sequential, temporal or special relations."@en;
  
.

cdi:CloseMatch
  a cdi:MatchingCriterion;
  rdfs:label "CloseMatch";
  rdfs:comment "The identified objects (source and target) are not exact but are similar. Equivalent to SKOS closeMatch - see the W3C Recommendation \"SKOS Simple Knowledge Organization System Reference\" - 10. Mapping Properties (https://www.w3.org/TR/skos-reference/#L4186)."@en;
.

cdi:Disjoint
  a cdi:MatchingCriterion;
  rdfs:label "Disjoint";
  rdfs:comment "The identified objects are do not have a close or exact match. Equivalent to disjoint objects in SKOS  - see the W3C Recommendation \"SKOS Simple Knowledge Organization System Reference\" (https://www.w3.org/TR/skos-reference/#L4186)."@en;
.

cdi:ExactMatch
  a cdi:MatchingCriterion;
  rdfs:label "ExactMatch";
  rdfs:comment "The identified objects (source and target) are identical. Equivalent to SKOS exactMatch - see the W3C Recommendation \"SKOS Simple Knowledge Organization System Reference\" - 10. Mapping Properties (https://www.w3.org/TR/skos-reference/#L4186)."@en;
.


# enumeration MemberRelationshipScope
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::MemberRelationshipScope
cdi:MemberRelationshipScope
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "MemberRelationshipScope";
  rdfs:comment "Definition\n============\nA vocabulary for the specification of how much of a collection is referenced. All, some or none of the collection may be indicated."@en;
  
.

cdi:All
  a cdi:MemberRelationshipScope;
  rdfs:label "All";
  rdfs:comment "Every member of the collection is indicated."@en;
.

cdi:None
  a cdi:MemberRelationshipScope;
  rdfs:label "None";
  rdfs:comment "This indicates that no member of the collection is indicated, e.g. None of the relationships are symmetric."@en;
.

cdi:Some
  a cdi:MemberRelationshipScope;
  rdfs:label "Some";
  rdfs:comment "Some, but not necessarily all of the members of the collection are indicated."@en;
.


# enumeration PointFormat
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::PointFormat
cdi:PointFormat
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "PointFormat";
  rdfs:comment "Definition\n============\nProvides an enumerated list of valid point format types for capturing a coordinate point."@en;
  
.

cdi:DecimalDegree
  a cdi:PointFormat;
  rdfs:label "DecimalDegree";
  rdfs:comment "Value is expressed as a decimal degree."@en;
.

cdi:DecimalMinutes
  a cdi:PointFormat;
  rdfs:label "DecimalMinutes";
  rdfs:comment "Value is expressed as decimal minutes."@en;
.

cdi:DegreesMinutesSeconds
  a cdi:PointFormat;
  rdfs:label "DegreesMinutesSeconds";
  rdfs:comment "Value is expressed as degrees-minutes-seconds."@en;
.

cdi:Feet
  a cdi:PointFormat;
  rdfs:label "Feet";
  rdfs:comment "Value is expressed in feet."@en;
.

cdi:Meters
  a cdi:PointFormat;
  rdfs:label "Meters";
  rdfs:comment "Value is expressed in meters."@en;
.


# enumeration SchedulingStrategy
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::SchedulingStrategy
cdi:SchedulingStrategy
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "SchedulingStrategy";
  rdfs:comment "Definition\n============\nEnumeration that consists of forward chaining and backward chaining. Rule based scheduling is guided by its scheduling strategy."@en;
  
.

cdi:BackwardChaining
  a cdi:SchedulingStrategy;
  rdfs:label "BackwardChaining";
  rdfs:comment "Backward chaining is a strategy of first identifying the goal/completion date and working backward in time from there to achieve it."@en;
.

cdi:ForwardChaining
  a cdi:SchedulingStrategy;
  rdfs:label "ForwardChaining";
  rdfs:comment "Forward chaining is a strategy of planning to complete each step as soon as possible to reach the goal at the earliest date."@en;
.


# enumeration SexSpecification
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::SexSpecification
cdi:SexSpecification
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "SexSpecification";
  rdfs:comment "Definition\n============\nSex specification is limited to the purpose of determining the proper pronoun to use in addressing the individual. This may be based on conventional usage or personal preference."@en;
  
.

cdi:Feminine
  a cdi:SexSpecification;
  rdfs:label "Feminine";
  rdfs:comment "Use the feminine pronoun (equivalent of English she, her, her's)."@en;
.

cdi:GenderNeutral
  a cdi:SexSpecification;
  rdfs:label "GenderNeutral";
  rdfs:comment "Use a gender neutral or non-specified pronoun. (equivalent of English they, them, theirs)."@en;
.

cdi:Masculine
  a cdi:SexSpecification;
  rdfs:label "Masculine";
  rdfs:comment "Use the masculine pronoun (equivalent of English he, him, his)."@en;
.


# enumeration StructureExtent
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::StructureExtent
cdi:StructureExtent
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "StructureExtent";
  rdfs:comment "Definition\n============\nType of relation in terms of totality with respect to an associated collection.  The totality type is given by the controlled vocabulary {total, partial}.\n\nExamples\n==========\nA binary relation R on a collection C is total if all members of C are related to each other in R. The relation is partial otherwise."@en;
  
.

cdi:Partial
  a cdi:StructureExtent;
  rdfs:label "Partial";
  rdfs:comment "Some members of a collection C are not related to each other."@en;
.

cdi:Total
  a cdi:StructureExtent;
  rdfs:label "Total";
  rdfs:comment "All members of a collection C are related to each other."@en;
.


# enumeration TableDirectionValues
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::TableDirectionValues
cdi:TableDirectionValues
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "TableDirectionValues";
  rdfs:comment "Definition\n============\nIndicates whether the tables in the group should be displayed with the first column on the right, on the left, or based on the first character in the table that has a specific direction."@en;
  
.

cdi:Auto
  a cdi:TableDirectionValues;
  rdfs:label "Auto";
  rdfs:comment "Display table based on the first character in the table that has a specific direction."@en;
.

cdi:Ltr
  a cdi:TableDirectionValues;
  rdfs:label "Ltr";
  rdfs:comment "Display table with first column on the left."@en;
.

cdi:Rtl
  a cdi:TableDirectionValues;
  rdfs:label "Rtl";
  rdfs:comment "Display table with first column on the right."@en;
.


# enumeration TemporalOperator
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::TemporalOperator
cdi:TemporalOperator
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "TemporalOperator";
  rdfs:comment "Definition\n============\nSet of control flow operators where the continuation of the execution flow depends on the finalization of one or more preceding activities."@en;
  
.

cdi:AndJoin
  a cdi:TemporalOperator;
  rdfs:label "AndJoin";
  rdfs:comment "Given three activities A, B and C, if ANDJoin(A, B) -> C, then C is executed after both A and B finish executing. ANDJoin is sometimes referred to as synchronization."@en;
.

cdi:AndSplit
  a cdi:TemporalOperator;
  rdfs:label "AndSplit";
  rdfs:comment "Given three activities A, B and C, if ANDSplit(A) -> (B, C), then both B and C are executed after A finishes executing."@en;
.

cdi:XorJoin
  a cdi:TemporalOperator;
  rdfs:label "XorJoin";
  rdfs:comment "Given three activities A, B and C, if XORJoin(A, B) -> C, then C is executed after either A or B finishes executing. XORJoin is sometimes referred to as simple merge."@en;
.

cdi:XorSplit
  a cdi:TemporalOperator;
  rdfs:label "XorSplit";
  rdfs:comment "Given three activities A, B and C, if XORSplit(A) -> (B, C), then either B or C is executed, not both, after A finishes executing. XORSplit is sometimes referred to as exclusive choice."@en;
.


# enumeration TemporalRelation
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::TemporalRelation
cdi:TemporalRelation
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "TemporalRelation";
  rdfs:comment "Definition\n==========\nSet of thirteen Allen's interval relations defined as Contains, Finishes, Meets, Overlaps, Precedes, Starts (and their converses), plus Equals. These are jointly exhaustive and pairwise disjoint binary relations representing temporal relationships between pairs of time intervals.\n\nExplanatory notes\n=================\nHere are the relations in Allen's interval algebra:\n\n- a precedes b (p) and b is preceded by a (P)\n- a meets b (m) and b is met by a (M)\n- a overlaps b (o) and b is overlapped by a (O)\n- a is finished by b (F) and b finishes a (f)\n- a contains B (D) and b is during a (d)\n- a starts b (s) and b is started by a (S)\n- a and b equal (e) each other"@en;
  
.

cdi:Contains
  a cdi:TemporalRelation;
  rdfs:label "Contains";
  rdfs:comment "A contains interval relation. Representation of the contains relation in Allen's interval algebra. We say that an interval A contains another interval B if and only if A begins before B but finishes after it. More precisely, A.start < B.start < B.end < A.end. Instead of saying that A contains B we can also say that B is during A (converse). An asymmetric relationship: anti-reflexive, anti-symmetric, transitive."@en;
.

cdi:Equals
  a cdi:TemporalRelation;
  rdfs:label "Equals";
  rdfs:comment "An equals interval relation. Representation of the equals relation in Allen's interval algebra. We say that an interval A equals another interval B if and only if they both begin and finish at the same time. More precisely, A.start = B.start < A.end = B.end. Instead of saying that A equals B we can also say the B equals A (reflexive). An equivalence symmetric relationship: reflexive, symmetric, transitive."@en;
.

cdi:Finishes
  a cdi:TemporalRelation;
  rdfs:label "Finishes";
  rdfs:comment "A finishes interval relation. Representation of the finishes relation in Allen's interval algebra. We say that an interval A finishes another interval B if and only if A begins after B but both finish at the same time. More precisely, B.start < A.start < B.end = A.end. Instead of saying that A finishes B we can also say that B is finished by A (converse). An asymmetric relationship: anti-reflexive, anti-symmetric, transitive."@en;
.

cdi:Meets
  a cdi:TemporalRelation;
  rdfs:label "Meets";
  rdfs:comment "A meets interval relation. Representation of the meets relation in Allen's interval algebra. We say that an interval A meets another interval B if and only if A finishes when B begins. More precisely, A.ends = B.start. Instead of saying that A meets B we can also say that B is met by A (converse). An immediate-precedence relationship: anti-reflexive, anti-symmetric, anti-transitive."@en;
.

cdi:Overlaps
  a cdi:TemporalRelation;
  rdfs:label "Overlaps";
  rdfs:comment "A overlaps interval relation. Representation of the overlaps relation in Allen's interval algebra. We say that an interval A overlaps another interval B if and only if A begins before B but finishes during B. More precisely, A.start < B.start < A.end < B.end. Instead of saying that A overlaps B we can also say that B is overlapped by A (converse). An acyclic precedence relationship: anti-reflexive, anti-symmetric, neither."@en;
.

cdi:Precedes
  a cdi:TemporalRelation;
  rdfs:label "Precedes";
  rdfs:comment "A precedes interval relation. Representation of the precedes relation in Allen's interval algebra. We say that an interval A precedes another interval B if and only if A finishes before B begins. More precisely, A.end < B.start. Instead of saying that A precedes B we can also say that B is preceded by A (converse). An asymmetric relationship: anti-reflexive, anti-symmetric, transitive."@en;
.

cdi:Starts
  a cdi:TemporalRelation;
  rdfs:label "Starts";
  rdfs:comment "A starts interval relation. Representation of the starts relation in Allen's interval algebra. We say that an interval A starts another interval B if and only if they both start at the same time but A finishes first. More precisely, A.start = B.start < A.end. An asymmetric relationship: anti-reflexive, anti-symmetric, transitive."@en;
.


# enumeration TextDirectionValues
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::TextDirectionValues
cdi:TextDirectionValues
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "TextDirectionValues";
  rdfs:comment "Definition\n============\nIndicates whether the text within cells should be displayed as left-to-right text (ltr), as right-to-left text (rtl), according to the content of the cell (auto) or in the direction inherited from the table direction annotation of the table."@en;
  
.

cdi:Auto
  a cdi:TextDirectionValues;
  rdfs:label "Auto";
  rdfs:comment "Text in the cells should be according to the content of the cell (auto)."@en;
.

cdi:Inherit
  a cdi:TextDirectionValues;
  rdfs:label "Inherit";
  rdfs:comment "Text in the cells should inherit its direction from the table direction annotation of the table."@en;
.

cdi:Ltr
  a cdi:TextDirectionValues;
  rdfs:label "Ltr";
  rdfs:comment "Text in cells should be displayed left-to-right (ltr)."@en;
.

cdi:Rtl
  a cdi:TextDirectionValues;
  rdfs:label "Rtl";
  rdfs:comment "Text in cells should be displayed right-to-left (rtl)."@en;
.


# enumeration TrimValues
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::TrimValues
cdi:TrimValues
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "TrimValues";
  rdfs:comment "Definition\n============\nSpecifies which spaces to remove from a data value (start, end, both, neither)."@en;
  
.

cdi:Both
  a cdi:TrimValues;
  rdfs:label "Both";
  rdfs:comment "Trim whitespace characters from both the start and the end of the value."@en;
.

cdi:End
  a cdi:TrimValues;
  rdfs:label "End";
  rdfs:comment "Trim whitespace characters from the end of the value."@en;
.

cdi:Neither
  a cdi:TrimValues;
  rdfs:label "Neither";
  rdfs:comment "Trim whitespace characters from neither the start nor the end of the value."@en;
.

cdi:Start
  a cdi:TrimValues;
  rdfs:label "Start";
  rdfs:comment "Trim whitespce characters from the start of the value."@en;
.


# enumeration WhiteSpaceRule
# based on the UML enumeration DDICDIModels::DDICDILibrary::DataTypes::Enumerations::WhiteSpaceRule
cdi:WhiteSpaceRule
  a rdfs:Class, owl:Class, ucmis:Enumeration;
  rdfs:label "WhiteSpaceRule";
  rdfs:comment "Definition\n============\nWhiteSpace constrains the value space of types derived from string."@en;
  
.

cdi:Collapse
  a cdi:WhiteSpaceRule;
  rdfs:label "Collapse";
  rdfs:comment "After the processing implied by the replace, contiguous sequences of Unicode hexadecimal #x20's are collapsed to a single #x20, and any #x20 at the start or end of the string is then removed."@en;
.

cdi:Preserve
  a cdi:WhiteSpaceRule;
  rdfs:label "Preserve";
  rdfs:comment "No normalization is done, the value is not changed (this is the behavior required by XML for element content)."@en;
.

cdi:Replace
  a cdi:WhiteSpaceRule;
  rdfs:label "Replace";
  rdfs:comment "All occurrences of Unicode hexadecimal #x9 (tab), #xA (line feed) and #xD (carriage return) are replaced with #x20 (space)."@en;
.


