# PLEASE DO NOT EDIT THIS CODE!
# This code was generated by the Eclipse Acceleo module UCMIS M2T on 2023-05-25 10:41:35.
# Target language is 'Ontology Turtle' ('onto.ttl') generated on the basis of the model 'DDICDIModels'.

# Ontology for DDICDIModels
# based on the UML package DDICDIModels
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix ucmis: <http://example.org/TODO/ucmis/> .
@prefix cdi:   <http://ddialliance.org/Specification/DDI-CDI/1.0/RDF/> .

<DDICDIModels.onto.ttl> a owl:Ontology;
  rdfs:label "DDICDIModels";
  rdfs:comment "DDI-CDI Specification\n=====================\n\nThe DDI-Cross Domain Integration (DDI-CDI) specification provides a\nmodel for working with a wide variety of research data across many\nscientific and policy domains. It provides a level of detail which\nsupports machine-actionable processing of data, both within and between\nsystems, and is designed to be easily aligned with other standards.\n\nIt focuses on the key elements of the data management challenges facing\nresearch today: an exact understanding of data in a wide variety of\nformats, coming from many different sources. Two elements are critical\nfor dealing with these challenges: a flexible means of describing data\nthat can reveal the connections between the same data existing in\ndifferent formats, and a means of describing the provenance of the data\nat a detailed (but comprehensible) level: the processes which produced\nit must be transparent.\n\nDDI-CDI covers these areas in a fashion intended to make it optimally\nuseful to modern systems, which often employ a variety of models, and\ncomply with a range of related specifications for both functions related\nto data description and process/provenance. The model is designed to be\neasy to fit into such systems, by aligning with relevant external\nstandards, and to be align-able with them into the future.\n\nThe core model field-level documentation is available in the section\n:ref:`DDICDIModels::DDICDILibrary`.\n\nThe corresponding Git repository can be found at\nhttps://bitbucket.org/ddi-alliance/ddi-cdi/.\n\nFurther information on DDI-CDI is available at the\nrelated DDI Alliance web page https://ddialliance.org/Specification/DDI-CDI/.\n\nPurpose\n-------\n\nThe DDI-CDI specification describes a model and supporting elements for\nimplementing it in the areas of data description and process/provenance.\nIt is not intended to supplant existing specifications for these\npurposes, but to fill in the information which such specifications often\ndo not capture. For data, this is the description of a single bit of\ninformation – a datum – which can be used to play different roles in\ndifferent data structures and formats. For provenance and process, this\nis the packaging of specific machine-level processes, which may be\ndescribed in many different ways, into a structure which relates them to\nthe business processes described at a level understandable to human\nusers.\n\nIn order to serve this purpose, the DDI-CDI specification uses a Unified\nModeling Language (UML) formalization so that it can be mapped against\nother models within systems more easily. Several different syntax\nexpressions of the model are made available to support implementation.\n\nSeveral important features of the specification can be highlighted, to\nshow how it serves this purpose:\n\n-  Domain-independence\n\n-  Datum-Oriented Data Description\n\n-  Provenance and Process Description\n\n-  Foundational Metadata\n\n-  Interoperability, Sustainability, and Alignment with Other Standards\n\nEach of these will be addressed in more detail, and an outline of the\nspecification documents is presented.\n\nKey Features of the Specification\n---------------------------------\n\n**Domain Independence**\n\nDDI-CDI is designed to be used with research data from any domain. In\norder to do this, it is fundamentally based on the structure and other\ngeneric aspects of the things it describes. It does not attempt to be a\ndomain model of semantics, nor a model specific to the life-cycle of a\nparticular domain of science or research. (Historically, DDI has focused\non the Social, behavioral, and Economic [SBE] sciences and some types of\nhealth research – to see how DDI-CDI relates to other DDI\nspecifications, see below.)\n\nDDI-CDI is intended to be complimentary to (and used in combination\nwith) other standards and models which focus more on domain-specific\naspects (such as semantics and life-cycle models). Such generic elements\nsuch as classifications and variables are given a detailed formal\ntreatment but are agnostic as to the domain. It is left to the user to\nemploy whatever domain semantics are demanded by the data with which\nthey are working.\n\nThis feature of the specification makes it well-suited to combining data\ncoming from more than one domain or system, to allow a description that\nsupports systems which perform data integration, harmonization, and\nsimilar functions. Cross-domain data sharing is becoming increasingly\ncommon, and DDI-CDI is intended to provide support for this type of\napplication.\n\n**Datum-Oriented Data Description**\n\nDDI-CDI embraces a form of data description which is based on its atomic\ncomponents: individual datums. Any given datum can play different roles\nin different formatting of the same data set, depending on how it is\nprocessed and transformed. In order to retain the continuity of a given\ndatum across different formats and throughout a series of processes,\nDDI-CDI allows it to be described playing different roles in different\nstructures.\n\nDDI-CDI provides four basic types of structural description for data\nsets: wide data, long data, dimensional data, and key-value data. These\nfour types (and their sub-types) provide coverage for many common data\nformats today. While not comprehensive, they cover the majority of cases\nthat the developers of this specification have seen. These include many\nof the newer forms of data such as streaming data, \"big\" data,\nregisters, and instrument data. The underlying approach is one which\ncould – and may be – expanded in future. By assigning appropriate roles\nto the variables which contain the datums across each of these different\nformats, however, it is possible to understand how data passes from one\nform to another.\n\n**Provenance and Process Description**\n\nIf we are to fully understand data, we also need to know how it has been\nprocessed and transformed. Given our ability to describe how a different\ndatum can be used in different data sets, it becomes desirable to\nunderstand also how those data sets relate to one another in terms of\nthe processes which use them. This can be understood as an important\naspect of data provenance.\n\nThere are many different ways of describing process and provenance.\nPopular models include the Business Process Modelling and Notation\n(BPMN) standard and the PROV Ontology (from W3C). There are a multitude\nof syntaxes for driving data transformation, cleaning, and analysis in\npackages such as R, SAS, Stata, MATLab, SPSS, Python, and so on. There\nare also some emerging standard models for specifically describing such\nprocesses (e.g., Structured Data Transformation Language\n[SDTL], https://ddialliance.org/products/sdtl/1.0, Validation and\nTransformation Language [VTL], https://sdmx.org/?page_id=5096).\n\nDDI-CDI attempts to do something which complements the use of such\nmodels, by connecting specific processes interpretable by machines at\nthe lowest level (described in a package-specific syntax or language)\nwith the higher-level flows which combine these into human-readable\ndocumentation of business processes. Both traditional linear\n(deterministic) processing and the newer declarative (non-deterministic)\nprocessing approaches are supported.\n\n**Foundational Metadata**\n\nIn order to formally describe data at a detailed level, there are many\ncomponent elements which themselves must be modelled. Concepts used for\nstatistical data but also widely applicable – including categories and\nvariables – are a core part of this, but the range is broad. These\ncomponents are included in DDI-CDI as \"foundational metadata.\"\n\nTerminology for such constructs varies widely across domains. DDI-CDI\nhas attempted to provide common terms for these components, and to adopt\ncommon models from other standards where it seemed useful.\n\nOne area which deserves particular attention is the \"variable cascade\" –\na model for how data are described at different points in their\ncreation, processing, and use, which is designed to optimize reuse.\nWhile many different models have a \"variable\" of some form, the one\npresented in DDI-CDI reflects the experience of working with this\nimportant construct in many of the specifications and standards which\nhave preceded it. It is a nuanced view of how variables relate and are\nunderstood across different systems, and – although not simple – it is a\npowerful model which helps solve some of the commonly encountered\nproblems in data description and management.\n\n**Interoperability, Sustainability, and Alignment with Other Standards**\n\nDDI-CDI is fundamentally a model which is intended to be implemented\nacross a wide variety of technology platforms, and in combination with\nmany other standards, models, and specifications. To support this use,\nit is formalized using a limited subset of the Unified Modelling\nLanguage (UML) class diagram part. The model is provided in the form of\nCanonical XMI (restricted XML Metadata Interchange) – an interchange\nformat for UML models supporting the import into many different\nmodelling and development tools. Further, a syntax representation is\nprovided in XML Schema, so that direct implementation of the model is\npossible if needed.\n\nThe platform-independence of the model makes it more easily applicable\nacross a broad range of applications and helps ensure that it will be\nsustainable even as the technology landscape evolves.\n\nDDI-CDI builds on many other standard models and is aligned with them\nwhere appropriate. This is shown in the model itself, where\nformalizations from other models and specifications are refined,\nextended, or directly used. The specification includes a description of\nwhat these other standards and models are, and how they are used in DDI-CDI.\n\nCredits\n-------\n\nMembers of the Cross Domain Integration (CDI) Working Group shepherded the standard into its final form and produced the final documentation. Listed in alphabetical order they are: \n\n-  Arofan Gregory (chair)\n-  Dan Gillman\n-  Flavio Rizzolo\n-  Hilde Orten\n-  Jay Greenfield\n-  Joachim Wackerow\n-  Larry Hoyle\n-  Oliver Hopt\n-  Wendy Lee Thomas (Technical Committee contact)\n\nOver 100 people have contributed to the development of the Data Documentation Initiative Cross Domain Integration (DDI-CDI) specification. A more complete description of their contribution to the work can be found at https://bitbucket.org/ddi-alliance/ddi-cdi/src/master/CREDITS.md."@en;
  owl:imports <DDICDILibrary.onto.ttl>;
.



