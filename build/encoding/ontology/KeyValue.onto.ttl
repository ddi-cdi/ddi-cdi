# PLEASE DO NOT EDIT THIS CODE!
# This code was generated by the Eclipse Acceleo module UCMIS M2T on 2023-05-25 10:41:35.
# Target language is 'Ontology Turtle' ('onto.ttl') generated on the basis of the model 'DDICDIModels'.

# Ontology for KeyValue
# based on the UML package DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix ucmis: <http://example.org/TODO/ucmis/> .
@prefix cdi:   <http://ddialliance.org/Specification/DDI-CDI/1.0/RDF/> .

<KeyValue.onto.ttl> a owl:Ontology;
  rdfs:label "KeyValue";
  rdfs:comment "This package contains classes which are used to define key-value data, as found in various types of no-SQL and \"big data\" systems and data warehouses."@en;
.

# class ContextualComponent
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::ContextualComponent
cdi:ContextualComponent
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "ContextualComponent";
  rdfs:comment "Definition\n============\nEncapsulates contextual information of the key-value datastore to provide a scope to the instance key. The instance key is unique within the scope.\n\nExamples\n==========\nA partition, cluster name and any other key-value datastore organization information. \n\nExplanatory notes\n===================\nA key-value datastore can be organized into multiple contextual components. \nOther data structure components that are part of the instance key, e.g. identifier and dimension components, guarantee uniqueness only within the scope of a contextual component. \nSynthetic id components do guarantee global uniqueness, but they might complex to setup and maintain in many organizations. \nContextual components provide a simple mechanism to achieve uniqueness within a single key-value datastore. \nWhen a key-value datastore is organized in contextual components, a contextual component prefix is added to the instance key to make it unique across the entire key-value datastore."@en;
  rdfs:subClassOf cdi:DataStructureComponent;
.



# class InstanceKey
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::InstanceKey
cdi:InstanceKey
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "InstanceKey";
  rdfs:comment "Definition\n============\nSingle-valued key representation produced from the merge of the representations of all key members and a descriptor. \n\nExamples\n==========\nThe string \"cluster:income_distribution:unitid:20:period:2020/02:income\", where \"cluster:income_distribution\" is a key member based on a contextual component, \"unitid:20\" is based on an identifier component, \"period:2020/02\" is based on a component with a time role and \"income\" is based on a descriptor.\n\n\nExplanatory notes\n===================\nFor value strings, the merge is the string concatenation operation.\nFor other classes, an appropriate merge representation can be defined."@en;
  rdfs:subClassOf cdi:InstanceValue;
.


cdi:InstanceKey_correspondsTo_Unit
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "correspondsTo";
  skos:altLabel "InstanceKey_correspondsTo_Unit";
  rdfs:comment "Instance key corresponds to zero to one unit."@en;
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:Unit;
.

cdi:InstanceKey_correspondsTo_Universe
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "correspondsTo";
  skos:altLabel "InstanceKey_correspondsTo_Universe";
  rdfs:comment "Instance key corresponds to zero to one universe."@en;
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:Universe;
.

cdi:InstanceKey_identifies_DataPoint
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "identifies";
  skos:altLabel "InstanceKey_identifies_DataPoint";
  rdfs:comment "InstanceKey identifies one DataPoint."@en;
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:DataPoint;
.

cdi:InstanceKey_has_Descriptor
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "InstanceKey_has_Descriptor";
  
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:Descriptor;
.

cdi:InstanceKey_has_MainKeyMember
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "InstanceKey_has_MainKeyMember";
  
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:MainKeyMember;
.

cdi:InstanceKey_refersTo_ReferenceValue
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "refersTo";
  skos:altLabel "InstanceKey_refersTo_ReferenceValue";
  
  rdfs:domain cdi:InstanceKey;
  rdfs:range cdi:ReferenceValue;
.


# class KeyValueDataStore
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::KeyValueDataStore
cdi:KeyValueDataStore
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "KeyValueDataStore";
  rdfs:comment "Definition\n============\nOrganized collection of key-value data. It is structured by a key value structure.\n\nExamples\n==========\nA unit key-value datastore where each instance key corresponds to a data point capturing a different characteristic of a unit.\n\nExplanatory notes\n===================\nA key-value datastore is just a collection of key-value pairs, i.e. instance keys and reference values. \nEach instance key encodes all relevant information about the context, the unit of interest and the variable associated with the reference value of a given data point."@en;
  rdfs:subClassOf cdi:DataSet;
.


cdi:KeyValueDataStore_has_InstanceKey
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "has";
  skos:altLabel "KeyValueDataStore_has_InstanceKey";
  
  rdfs:domain cdi:KeyValueDataStore;
  rdfs:range cdi:InstanceKey;
.


# class KeyValueStructure
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::KeyValueStructure
cdi:KeyValueStructure
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "KeyValueStructure";
  rdfs:comment "Definition\n============\nStructure of a key-value datastore (organized collection of key-value data). It is described by identifier, contextual, synthetic id, dimension, variable descriptor and variable value components.\n\nExamples\n==========\nThe structure described by [Income distribution, Unit id, Period, Income] where Income distribution is the contextual component, Unit id identifies a statistical unit, period is a effective period and Income is the variable of interest."@en;
  rdfs:subClassOf cdi:DataStructure;
.



# class MainKeyMember
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::MainKeyMember
cdi:MainKeyMember
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "MainKeyMember";
  rdfs:comment "Definition\n============\nIdentifies the unit of interest, either a statistical unit or a population, via identifier or dimension components, respectively, plus an optional contextual component. \nIf neither identifier nor dimension components are present, then a synthetic id component is used. \n\nExamples\n==========\nThe string \"income_distribution:male:Ontario:married\" in a dimensional key-value datastore, where instance key members are defined by context plus Sex, Province and Marital Status dimensions."@en;
  rdfs:subClassOf cdi:InstanceValue;
.


cdi:MainKeyMember_isBasedOn_DimensionComponent
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isBasedOn";
  skos:altLabel "MainKeyMember_isBasedOn_DimensionComponent";
  
  rdfs:domain cdi:MainKeyMember;
  rdfs:range cdi:DimensionComponent;
.

cdi:MainKeyMember_isBasedOn_IdentifierComponent
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isBasedOn";
  skos:altLabel "MainKeyMember_isBasedOn_IdentifierComponent";
  
  rdfs:domain cdi:MainKeyMember;
  rdfs:range cdi:IdentifierComponent;
.

cdi:MainKeyMember_hasValueFrom_SubstantiveValueDomain
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "hasValueFrom";
  skos:altLabel "MainKeyMember_hasValueFrom_SubstantiveValueDomain";
  
  rdfs:domain cdi:MainKeyMember;
  rdfs:range cdi:SubstantiveValueDomain;
.

cdi:MainKeyMember_isBasedOn_ContextualComponent
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isBasedOn";
  skos:altLabel "MainKeyMember_isBasedOn_ContextualComponent";
  
  rdfs:domain cdi:MainKeyMember;
  rdfs:range cdi:ContextualComponent;
.

cdi:MainKeyMember_isBasedOn_SyntheticIdComponent
  a rdf:Property, owl:ObjectProperty, ucmis:Association;
  # ASSOCIATION
  rdfs:label "isBasedOn";
  skos:altLabel "MainKeyMember_isBasedOn_SyntheticIdComponent";
  
  rdfs:domain cdi:MainKeyMember;
  rdfs:range cdi:SyntheticIdComponent;
.


# class SyntheticIdComponent
# based on the UML class DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyValue::SyntheticIdComponent
cdi:SyntheticIdComponent
  a rdfs:Class, owl:Class, ucmis:Class;
  rdfs:label "SyntheticIdComponent";
  rdfs:comment "Definition\n============\nPersistent and unique identifier (PIDs) to provide standarized, long-lasting identification. \n\nExamples\n==========\nUUIDs, GUIDs, DOIs, URNs or any other unique id generation framework.\n\nExplanatory notes\n===================\nThis PIDs either complement or replace identifier and dimension components. \nThey complement them when there is a need for having a globally unique identifier as part of an instance key. They replace them when identier components are not available (e.g. after de-identification for confidentiality)."@en;
  rdfs:subClassOf cdi:DataStructureComponent;
.





