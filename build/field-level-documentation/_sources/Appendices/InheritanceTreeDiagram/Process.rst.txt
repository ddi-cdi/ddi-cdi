.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

Process
=======


.. container:: class-diagram

   .. uml::

      @startuml
      title Inheritance tree of super classes starting from package **Process** without leaf classes

      left to right direction
      skinparam class {
        FontColor blue
      }
      scale 0.9
      skinparam {
        shadowing false
        minClassWidth 160
        sameClassWidth false
        legendBackgroundColor white
        ArrowThickness 1.5
      }
      skinparam class {
        ArrowColor black
        BackGroundColor #EEEEEE
        BorderColor black
      }
      hide circle
      hide empty members

      package Process  {
        class DDICDIModels::DDICDILibrary::Classes::Process::Activity as "<color:blue>Activity" [[../DDICDILibrary/Classes/Process/Activity.html#super-class-hierarchy-generalization{ <U+2015> Activity:\nAn activity is a task described at a conceptual level. It is not parameterized and as such is less reusable. For more logical/physical, fine-grained, reusable description there is a sub-type called step.}]]
      }
      package Process  {
        class DDICDIModels::DDICDILibrary::Classes::Process::Step as "<color:blue>Step" [[../DDICDILibrary/Classes/Process/Step.html#super-class-hierarchy-generalization{ <U+2015> Step:\nStep is a reusable, parameterized activity associated to information flows. One or more steps perform an sctivity.}]]
      }
      DDICDIModels::DDICDILibrary::Classes::Process::Activity <|-- DDICDIModels::DDICDILibrary::Classes::Process::Step
      package Process  {
        class DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic as "<color:blue>ControlLogic" [[../DDICDILibrary/Classes/Process/ControlLogic.html#super-class-hierarchy-generalization{ <U+2015> ControlLogic:\nControl logic is a program in which the order of statements is explicit. Control logic is either deterministic (imperative) or non-deterministic (declarative). Deterministic control logic consists of control constructs. Declarative control logic is constraint- and/or rule-based. Control logic may co ...}]]
      }
      package Process  {
        class DDICDIModels::DDICDILibrary::Classes::Process::DeterministicImperative as "<color:blue>DeterministicImperative" [[../DDICDILibrary/Classes/Process/DeterministicImperative.html#super-class-hierarchy-generalization{ <U+2015> DeterministicImperative:\nDeterministic imperative is a subtype of control logic. Deterministic control logic consists of control constructs.}]]
      }
      DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic <|-- DDICDIModels::DDICDILibrary::Classes::Process::DeterministicImperative
      package Process  {
        class DDICDIModels::DDICDILibrary::Classes::Process::NonDeterministicDeclarative as "<color:blue>NonDeterministicDeclarative" [[../DDICDILibrary/Classes/Process/NonDeterministicDeclarative.html#super-class-hierarchy-generalization{ <U+2015> NonDeterministicDeclarative:\nNon-deterministic control logic is a subtype of control logic. Non-deterministic (or declarative) control logic is constraint- and/or rule-based.}]]
      }
      DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic <|-- DDICDIModels::DDICDILibrary::Classes::Process::NonDeterministicDeclarative

      @enduml

