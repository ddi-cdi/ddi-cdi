.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DesignPatterns::CollectionsPattern::Structure:

*Structure*
***********

**Fully qualified class name**: DDICDIModels::DesignPatterns::CollectionsPattern::Structure
| Class is abstract.

Definition
==========
Organized set of relationships between members in a collection. These relationships can be characterized mathematically in terms of reflexivity, symmetry and transitivity, or informally in terms of the collection's topology, e.g. network, tree, etc. In both cases it can also be defined either on all (total) or some (partial) members.

- Specification: formal characterization of a structure in terms of reflexivity, symmetry and transitivity.
- StructureSpecification: set of mathematical properties of a structure (reflexivity, symmetry and transitivity).
- Totality: characterization of a structure in terms of whether it applies to all (total) or some (partial) members.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DesignPatterns/CollectionsPattern/Structure.pu


.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - name
           - \- *own class* \-
           - Human understandable name (linguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
           - 0..*
           - 

         * - purpose
           - \- *own class* \-
           - Intent or reason for the object/the description of the object.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 

         * - semantics
           - \- *own class* \-
           - Specifies the semantics of the object in reference to a vocabulary, ontology, etc.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - specification
           - \- *own class* \-
           - Provides information on reflexivity, transitivity, and symmetry of relationship using a descriptive term from an enumerated list. Use if all relations within this relation structure are of the same specification.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::StructureSpecification` 
           - 0..1
           - 

         * - topology
           - \- *own class* \-
           - Means of organizing a set of members in a collection based on explicit rules for how members are related to each other. At a minimum, the controlled vocabulary should contain the following entries below. Note that these entries overlap and need to be organized into a type hierarchy once other entries are identified and defined.
             
             - Graph: organized collection where members are vertices and relationships between them are edges.
             - Lattice: organized collection where members are vertices, relationships between them are directed edges and there are two and only two distinguished vertices, i.e. a source, which has only outgoing edges, and a sink, which has only incoming edges.
             - Network/mesh: collection of linked members.
             - Partition: organized collection where members are grouped into non-empty and non-overlapping sub-collections
             - Tree: organized collection where members are vertices, relationships between them are edges and any two vertices are connected by exactly one path (sequence of contiguous edges)
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - totality
           - \- *own class* \-
           - Indicates whether the related collections are comprehensive in terms of their coverage i.e application to all (total) or some (partial) members.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::Enumerations::StructureExtent` 
           - 0..1
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of Structure
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - from
           - Structure has MemberRelationship
           - 
           - 1..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DesignPatterns::CollectionsPattern::MemberRelationship`
           - 0..*
           - composite
           - \- *own class* \-
         * - from
           - Structure structures Collection
           - 
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DesignPatterns::CollectionsPattern::Collection`
           - 0..1
           - none
           - \- *own class* \-

