.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic:

ControlLogic
************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Process:::index:`ControlLogic`


Definition 
============ 
Control logic is a program in which the order of statements is explicit. Control logic is either deterministic (imperative) or non-deterministic (declarative). Deterministic control logic consists of control constructs. Declarative control logic is constraint- and/or rule-based. Control logic may contain control logic.  

Examples 
========== 
A loop control construct is deterministic control logic. A script is deterministic control logic. :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Rule` based scheduling is declarative control logic.  

Explanatory notes 
=================== 
DDI-CDI has extended control logic to include non-deterministic activity and step controls, which are not specifically described in DDI Lifecycle or DDI Codebook.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Process/ControlLogic.pu

.. container::
   :name: inheritance

   .. dropdown:: Inheritance

      .. |_| unicode:: U+2003 .. em space

      .. role:: focus

      .. cssclass:: regular

      | :focus:`Process::ControlLogic`

      .. cssclass:: regular

      |    ᐊ── :ref:`Process::DeterministicImperative<DDICDIModels::DDICDILibrary::Classes::Process::DeterministicImperative>`

      .. cssclass:: regular

      |    |_| ᐊ── :ref:`Process::ConditionalControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ConditionalControlLogic>`

      .. cssclass:: regular

      |    |_| ᐊ── :ref:`Process::Sequence<DDICDIModels::DDICDILibrary::Classes::Process::Sequence>`

      .. cssclass:: regular

      |    ᐊ── :ref:`Process::NonDeterministicDeclarative<DDICDIModels::DDICDILibrary::Classes::Process::NonDeterministicDeclarative>`

      .. cssclass:: regular

      |    |_| ᐊ── :ref:`Process::RuleBasedScheduling<DDICDIModels::DDICDILibrary::Classes::Process::RuleBasedScheduling>`

      .. cssclass:: regular

      |    |_| ᐊ── :ref:`Process::TemporalConstraints<DDICDIModels::DDICDILibrary::Classes::Process::TemporalConstraints>`

      .. cssclass:: regular

      |    |_| |_| ᐊ── :ref:`Process::AllenIntervalAlgebra<DDICDIModels::DDICDILibrary::Classes::Process::AllenIntervalAlgebra>`

      .. cssclass:: regular

      |    |_| |_| ᐊ── :ref:`Process::TemporalControlConstruct<DDICDIModels::DDICDILibrary::Classes::Process::TemporalControlConstruct>`




.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - description
           - \- *own class* \-
           - A desription of the control logic in human-readable language.
           - String 
           - 0..1
           - 

         * - identifier
           - \- *own class* \-
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 

         * - workflow
           - \- *own class* \-
           - Reference to the system or standard from which the workflow was taken.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of ControlLogic
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - to
           - Activity hasInternal ControlLogic
           - An activity is embedded in the control construct which launches it.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - ControlLogic has InformationFlowDefinition
           - A control construct has zero or more information flow definitions each of which provides the control construct with zero or more input and output parameters used or produced in the step/sub-step with which it is associated.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::InformationFlowDefinition`
           - 0..*
           - shared
           - \- *own class* \-
         * - to
           - ControlLogic hasSubControlLogic ControlLogic
           - Control logic is a container of control logic which is in turn a container of control logic ad infinitum so that it is able to represent the structure of a program.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic`
           - 0..1
           - none
           - \- *own class* \-
         * - from
           - ControlLogic informs ProcessingAgent
           - Control logic informs a processing agent. The information may be deterministic or non-deterministic.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ProcessingAgent`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - ControlLogic invokes Activity
           - Control logic invokes an activity deterministically (either conditionally or unconditionally) or non-derministically (based on temporal constraints or rule-based scheduling).
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
           - 1..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **ControlLogic** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/ControlLogic.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **ControlLogic** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/ControlLogic_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2

         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **ControlLogic** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/ControlLogic.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **ControlLogic** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/ControlLogic.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5

