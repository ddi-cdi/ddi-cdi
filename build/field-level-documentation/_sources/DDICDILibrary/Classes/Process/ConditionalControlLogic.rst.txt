.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Process::ConditionalControlLogic:


ConditionalControlLogic
***********************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Process:::index:`ConditionalControlLogic`


Definition 
============ 
A set of decision points which determine the flow between the steps used to perform an activity. 

Examples 
========== 
Loop, IfThenElse, RepeatWhile, etc.


.. dropdown:: Diagram
   :open:

   .. container::
      :name: diagram

      .. uml:: /DDICDILibrary/Classes/Process/ConditionalControlLogic.pu

.. dropdown:: Inheritance

   .. |_| unicode:: U+2003 .. em space

   .. role:: focus

   .. cssclass:: regular

   | :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`

   .. cssclass:: regular

   | |_| ᐊ── :ref:`Process::DeterministicImperative<DDICDIModels::DDICDILibrary::Classes::Process::DeterministicImperative>`

   .. cssclass:: regular

   | |_| |_| ᐊ── :focus:`Process::ConditionalControlLogic`




.. dropdown:: Attributes

   .. list-table::
      :widths: 10 10 60 10 10 10
      :header-rows: 1
      :class: datatable-attributes

      * - Name
        - Inherited from
        - Description
        - Data Type
        - Multiplicity
        - Default value
      * - condition
        - \- *own class* \-
        - A condition associated with the construct property of the ConditionalControlLogic. It is a logical expression which can be evaluated as either true or false to determine the specific execution of the associated  construct.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CommandCode` 
        - 1..1
        - 

      * - construct
        - \- *own class* \-
        - controlConstruct is an enumeration of type ControlConstructType. The enumeration consists of IfThen, Else, Loop, RepeatUntil and RepeatWhile.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::Enumerations::ControlConstruct` 
        - 1..1
        - 

      * - description
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
        - A desription of the control logic in human-readable language.
        - String 
        - 0..1
        - 

      * - identifier
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
        - Identifier for objects requiring short- or long-lasting referencing and management.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
        - 0..1
        - 

      * - workflow
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
        - Reference to the system or standard from which the workflow was taken.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
        - 0..1
        - 


.. dropdown:: Associations

   .. list-table::
      :widths: 5 10 30 5 10 10 5 5 15
      :header-rows: 1
      :class: datatable-associations
   
      * - Direction
        - Association
        - Description
        - Multiplicity of ConditionalControlLogic
        - Package of Other Class
        - Other Class
        - Multiplicity of other class
        - Aggregation Kind
        - Inherited from
      * - to
        - Activity hasInternal ControlLogic
        - An activity is embedded in the control construct which launches it.
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
        - 0..*
        - none
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
      * - from
        - ControlLogic has InformationFlowDefinition
        - A control construct has zero or more information flow definitions each of which provides the control construct with zero or more input and output parameters used or produced in the step/sub-step with which it is associated.
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::InformationFlowDefinition`
        - 0..*
        - shared
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
      * - to
        - ControlLogic hasSubControlLogic ControlLogic
        - Control logic is a container of control logic which is in turn a container of control logic ad infinitum so that it is able to represent the structure of a program.
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic`
        - 0..1
        - none
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
      * - from
        - ControlLogic informs ProcessingAgent
        - Control logic informs a processing agent. The information may be deterministic or non-deterministic.
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ProcessingAgent`
        - 0..*
        - none
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
      * - from
        - ControlLogic invokes Activity
        - Control logic invokes an activity deterministically (either conditionally or unconditionally) or non-derministically (based on temporal constraints or rule-based scheduling).
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
        - 1..*
        - none
        - :ref:`Process::ControlLogic<DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic>`
      * - to
        - Rule hasPrecondition ConditionalControlLogic
        - The condition part of a rule is associated with conditonal control logic.
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Rule`
        - 0..*
        - none
        - \- *own class* \-

.. dropdown:: Syntax representations / encodings

   All syntax representations except the Canonical XMI are provided as reference points
   for specific implementations, or for use as defaults if sufficient in the form presented.

   .. tab-set::

      .. tab-item:: Canonical XMI
         :class-content: encoding

         Fragment for the class **ConditionalControlLogic** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)

         .. literalinclude:: /xmi/ConditionalControlLogic.xmi
            :lines: 2-
            :language: xml
            :linenos:
            :emphasize-lines: 4

      .. tab-item:: XML Schema
         :class-content: encoding

         Fragment for the class **ConditionalControlLogic** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Process/ConditionalControlLogic_xsd.txt 
            :language: xml
            :linenos:
            :emphasize-lines: 1
            :dedent: 2

      .. tab-item:: Ontology (Turtle)
         :class-content: encoding

         Fragment for the class **ConditionalControlLogic** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Process/ConditionalControlLogic.onto.ttl 
            :language: turtle
            :linenos:
            :emphasize-lines: 3

      .. tab-item:: JSON-LD
         :class-content: encoding

         Fragment for the class **ConditionalControlLogic** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Process/ConditionalControlLogic.jsonld 
            :language: JSON-LD
            :linenos:
            :emphasize-lines: 5

