.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Process::Step:

Step
****

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Process:::index:`Step`


Definition
============
Step is a reusable, parameterized activity associated to information flows. One or more steps perform an sctivity.

Examples
==========
An editing activity resolves into one or more steps. A transformation of a wide data set to a long data set takes a single step on an ETL (extract, transform, load) platform like Pentaho.

Explanatory notes
===================
Steps can be broken out into a sequence of sub steps ad infinitum.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Process/Step.pu

.. container::
   :name: inheritance

   .. dropdown:: Inheritance

      .. |_| unicode:: U+2003 .. em space

      .. role:: focus

      .. cssclass:: regular

      | :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`

      .. cssclass:: regular

      | |_| ᐊ── :focus:`Process::Step`




.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - script
           - \- *own class* \-
           - The executable code for performing a process step, expressed in a formal language.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CommandCode` 
           - 0..1
           - 

         * - scriptingLanguage
           - \- *own class* \-
           - The formal language used by the script associated with the process step.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - definition
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - Natural language statement conveying the meaning of a concept, differentiating it from other concepts. Supports the use of multiple languages and structured text. 'externalDefinition' can't be used if 'definition' is used.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 

         * - description
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - A description of the Activity in human-readable language.
           - String 
           - 0..1
           - 

         * - displayLabel
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - A human-readable display label for the object. Supports the use of multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::LabelForDisplay` 
           - 0..*
           - 

         * - entityProduced
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - The thing resulting from the activity.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..*
           - 

         * - entityUsed
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - A thing employed in the activity.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..*
           - 

         * - identifier
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 

         * - name
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - Human understandable name (linguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
           - 0..*
           - 

         * - standardModelMapping
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
           - A reference to a standard process model from which the Activity is taken, such as The Generic Statistical Business Process Model (GSBPM), the Generic Longitudinal Business Process Model (GLBPM), Open Archive Information System (OAIS) model, etc. The model and step or sub-step corresponding to the Activity is noted here using the Paired External Controlled Vocabulary Entry. Enter the name of the model in "term" and the step, sub-step, or specific portion of the model in "extent".
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..*
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of Step
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - from
           - Activity has Step
           - Activities may be broken out into Steps. Steps are also a subtype of Activity.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Step`
           - 0..*
           - shared
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
         * - from
           - Activity hasInternal ControlLogic
           - An activity is embedded in the control construct which launches it.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic`
           - 0..*
           - none
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
         * - to
           - Activity hasSubActivity Activity
           - An Activity is a container for SubActivities.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
           - 0..1
           - none
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
         * - to
           - ControlLogic invokes Activity
           - Control logic invokes an activity deterministically (either conditionally or unconditionally) or non-derministically (based on temporal constraints or rule-based scheduling).
           - 1..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ControlLogic`
           - 0..*
           - none
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
         * - to
           - ProcessingAgent performs Activity
           - A processing agent performs an activity at the direction of control logic.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::ProcessingAgent`
           - 0..*
           - none
           - :ref:`Process::Activity<DDICDIModels::DDICDILibrary::Classes::Process::Activity>`
         * - to
           - Activity has Step
           - Activities may be broken out into Steps. Steps are also a subtype of Activity.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Activity`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - Step hasSubStep Step
           - A step can be broken out into steps ad infinitum.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Step`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - Step produces Parameter
           - The Step creates Parameter as an output.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Parameter`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - Step receives Parameter
           - The Step uses Parameter as an input.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Process::Parameter`
           - 0..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **Step** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/Step.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **Step** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/Step_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2

         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **Step** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/Step.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **Step** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Process/Step.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5

