.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Conceptual::Unit:

Unit
****

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Conceptual:::index:`Unit`


Definition
==========
:ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Individual` object of interest for some statistical activity, such as data collection.

Examples
========
Here are 3 examples:

1. :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Individual` US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.)
2. :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Individual` US computer companies (i.e., Microsoft, Apple, IBM, etc.)
3. :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Individual` US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
=================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (unit type) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (population). The height for Mary Roe (Unit)  might be 139 cm.

The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.

In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value â€“ the measure of the unit on the variable.

A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Conceptual/Unit.pu


.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - catalogDetails
           - \- *own class* \-
           - Bundles the information useful for a data catalog entry. Examples would be creator, contributor, title, copyright, embargo, and license information. A set of information useful for attribution, data discovery, and access. This is information that is tied to the identity of the object. If this information changes the version of the associated object changes.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CatalogDetails` 
           - 0..1
           - 

         * - definition
           - \- *own class* \-
           - Natural language statement conveying the meaning of a concept, differentiating it from other concepts. Supports the use of multiple languages and structured text.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 

         * - displayLabel
           - \- *own class* \-
           - A human-readable display label for the object. Supports the use of multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::LabelForDisplay` 
           - 0..*
           - 

         * - identifier
           - \- *own class* \-
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 

         * - name
           - \- *own class* \-
           - Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
           - 0..*
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of Unit
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - to
           - Key correspondsTo Unit
           - 
           - 0..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::Key`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - KeyDefinition correspondsTo Unit
           - 
           - 0..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::KeyDefinition`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - Population isComposedOf Unit
           - A unit in the population.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Population`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - Unit has UnitType
           - The unit type of the unit.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::UnitType`
           - 0..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **Unit** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/Unit.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **Unit** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/Unit_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2


         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **Unit** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/Unit.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **Unit** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/Unit.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5


