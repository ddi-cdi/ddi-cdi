.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualDomain:

ConceptualDomain
****************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Conceptual:::index:`ConceptualDomain`


Definition 
============ 
Set of concepts, where each concept is intended to be used as the meaning (signified) for a datum.  

Examples 
========== 
Substantive: Housing :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Unit` Tenure - Owned, Rented, Vacant. Sentinel: Non-response - Refused, Don't Know, Not Applicable   

Explanatory notes 
=================== 
Intent of a conceptual domain is defining a set of concepts used to measure a broader concept. For effective use they should be discrete (non-overlapping) and provide exhaustive coverage of the broader concept. The constituent concepts can be either sentinel or substantive,  The set can be described by either enumeration or by an expression.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Conceptual/ConceptualDomain.pu

.. container::
   :name: inheritance

   .. dropdown:: Inheritance

      .. |_| unicode:: U+2003 .. em space

      .. role:: focus

      .. cssclass:: regular

      | :focus:`Conceptual::ConceptualDomain`

      .. cssclass:: regular

      |    ᐊ── :ref:`Conceptual::SentinelConceptualDomain<DDICDIModels::DDICDILibrary::Classes::Conceptual::SentinelConceptualDomain>`

      .. cssclass:: regular

      |    ᐊ── :ref:`Conceptual::SubstantiveConceptualDomain<DDICDIModels::DDICDILibrary::Classes::Conceptual::SubstantiveConceptualDomain>`




.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - catalogDetails
           - \- *own class* \-
           - Bundles the information useful for a data catalog entry. Examples would be creator, contributor, title, copyright, embargo, and license information. A set of information useful for attribution, data discovery, and access. This is information that is tied to the identity of the object. If this information changes the version of the associated object changes.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CatalogDetails` 
           - 0..1
           - 

         * - displayLabel
           - \- *own class* \-
           - A human-readable display label for the object. Supports the use of multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::LabelForDisplay` 
           - 0..*
           - 

         * - identifier
           - \- *own class* \-
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of ConceptualDomain
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - from
           - ConceptualDomain isDescribedBy ValueAndConceptDescription
           - A description of the concepts in the domain. A numeric domain might use a logical expression to be machine actionable; a text domain might use a regular expression to describe strings that describe the concepts.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::ValueAndConceptDescription`
           - 0..1
           - none
           - \- *own class* \-
         * - from
           - ConceptualDomain takesConceptsFrom ConceptSystem
           - Conceptual domain takes concept from zero to one concept system.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptSystem`
           - 0..1
           - none
           - \- *own class* \-
         * - to
           - ConceptualValue hasConceptFrom ConceptualDomain
           - Conceptual value has concept from one conceptual domain.
           - 1..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::ConceptualValue`
           - 0..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **ConceptualDomain** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/ConceptualDomain.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **ConceptualDomain** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptualDomain_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2


         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **ConceptualDomain** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptualDomain.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **ConceptualDomain** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptualDomain.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5


