.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptSystem:

ConceptSystem
*************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Conceptual:::index:`ConceptSystem`


Definition
============
Set of concepts structured by the relations among them [GSIM 1.1].

Examples
==========
1) :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept` of Sex: Male, Female, Other. 
2) :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept` of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household :ref:`DDICDIModels::DesignPatterns::CollectionsPattern::Member`, etc.

Explanatory notes
===================
Note that this class can be used with concepts, classifications, universes, populations, unit types and any other class that extends from concept.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Conceptual/ConceptSystem.pu

.. container::
   :name: inheritance

   .. dropdown:: Inheritance

      .. |_| unicode:: U+2003 .. em space

      .. role:: focus

      .. cssclass:: regular

      | :focus:`Conceptual::ConceptSystem`

      .. cssclass:: regular

      |    ᐊ── :ref:`Conceptual::CategorySet<DDICDIModels::DDICDILibrary::Classes::Conceptual::CategorySet>`




.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - allowsDuplicates
           - \- *own class* \-
           - If value is False, the members are unique within the collection - if True, there may be duplicates. (Note that a mathematical “bag” permits duplicates and is unordered - a “set” does not have duplicates and may be ordered.)
           - Boolean 
           - 1..1
           - false

         * - catalogDetails
           - \- *own class* \-
           - Bundles the information useful for a data catalog entry. Examples would be creator, contributor, title, copyright, embargo, and license information. A set of information useful for attribution, data discovery, and access. This is information that is tied to the identity of the object. If this information changes the version of the associated object changes.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CatalogDetails` 
           - 0..1
           - 

         * - externalDefinition
           - \- *own class* \-
           - A reference to an external definition of a concept (that is, a concept which is described outside the content of the DDI-CDI metadata description). An example is a SKOS concept. The definition property is assumed to duplicate the external one referenced if externalDefinition is used. Other corresponding properties are assumed to be included unchanged if used.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..1
           - 

         * - identifier
           - \- *own class* \-
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 

         * - name
           - \- *own class* \-
           - Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
           - 0..*
           - 

         * - purpose
           - \- *own class* \-
           - Intent or reason for the object/the description of the object.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of ConceptSystem
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - to
           - ConceptStructure structures ConceptSystem
           - Concept structure structures concept system.
           - 0..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptStructure`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - ConceptSystem has Concept
           - Concept system has zero to many concepts.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept`
           - 0..*
           - shared
           - \- *own class* \-
         * - from
           - ConceptSystem isDefinedBy Concept
           - Concept system is defined by zero to many concepts. The conceptual basis for the collection of members.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - ConceptSystemCorrespondence maps ConceptSystem
           - Concept system correspondence maps two to many concept systems. Realization of structures in symmetric relation. When concepts of a single concept system are mapped, the Concept has to appear twice as target.
           - 2..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptSystemCorrespondence`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - ConceptualDomain takesConceptsFrom ConceptSystem
           - Conceptual domain takes concept from zero to one concept system.
           - 0..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualDomain`
           - 0..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **ConceptSystem** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/ConceptSystem.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **ConceptSystem** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptSystem_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2


         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **ConceptSystem** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptSystem.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **ConceptSystem** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/ConceptSystem.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5


