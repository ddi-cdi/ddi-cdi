.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Conceptual::InstanceVariable:

InstanceVariable
****************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Conceptual:::index:`InstanceVariable`


Definition
==========
Use of a represented variable within a data set.  

Examples
======== 
1. Gender: Dan Gillman has gender <m, male>, Arofan Gregory has gender <m, male>, etc.
2. Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc.
3. Endowment: Johns Hopkins has endowment of <3, $1,000,000 and above>, Yale has endowment of <3, $1,000,000 and above>, etc.
4. A tornado near Winterset, Iowa, had a peak wind speed of 170 mph. Two instance variables of a person's height reference the same represented variable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same substantive value domain, use a sentinel value domain drawn from the same set of sentinel value domains, have the same sentinel (missing value) concepts, and draw their population from the same universe. In other words, the two instance variables should be comparable.

Explanatory notes
================= 
The instance variable class inherits all of the properties and relationships of the represented variable class and, in turn, the conceptual variable class. This means that an instance variable can be completely populated without the need to create an associated represented variable or conceptual variable. If, however, a user wishes to indicate that a particular instance variable is patterned after a particular represented variable or a particular conceptual variable that may be indicated by including a relationship to the represented variable and/or conceptual variable. Including these references is an important method of indicating that multiple instance variables have the same representation, measure the same concept, and are drawn from the same universe. If two instance variables of a person's height reference the same represented variable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same substantive value domain, use a sentinel value domain drawn from the same set of sentinel value domains, have the same sentinel (missing value) concepts, and draw their population from the same universe. In other words, the two instance variables should be comparable. The instance variable describes actual instances of data that have been collected.


.. container::
   :name: diagram

   .. dropdown:: Diagram
      :open:

      .. uml:: /DDICDILibrary/Classes/Conceptual/InstanceVariable.pu

.. container::
   :name: inheritance

   .. dropdown:: Inheritance

      .. |_| unicode:: U+2003 .. em space

      .. role:: focus

      .. cssclass:: regular

      | :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`

      .. cssclass:: regular

      | |_| ᐊ── :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`

      .. cssclass:: regular

      | |_| |_| ᐊ── :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`

      .. cssclass:: regular

      | |_| |_| |_| ᐊ── :focus:`Conceptual::InstanceVariable`




.. container::
   :name: attributes

   .. dropdown:: Attributes
    
      .. list-table::
         :widths: 10 10 60 10 10 10
         :header-rows: 1
         :class: datatable-attributes
    
         * - Name
           - Inherited from
           - Description
           - Data Type
           - Multiplicity
           - Default value
         * - physicalDataType
           - \- *own class* \-
           - The data type of this variable. Supports the optional use of an external controlled vocabulary.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - platformType
           - \- *own class* \-
           - Describes the application or technical system context in which the variable has been realized. Typically a statistical processing package or other processing environment.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - source
           - \- *own class* \-
           - Reference capturing provenance information.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..1
           - 

         * - variableFunction
           - \- *own class* \-
           - Immutable characteristic of the variable such as geographic designator, weight, temporal designation, etc.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..*
           - 

         * - describedUnitOfMeasure
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
           - The unit in which the data values are measured (kg, pound, euro), expressed as a value from a controlled system of entries (i.e., QDT). Supports the provision of an identifier for the entry in the authoritative source (a URI, etc.), and the specific vocabulary.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - hasIntendedDataType
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
           - The data type intended to be used by this variable. Supports the optional use of an external controlled vocabulary.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - simpleUnitOfMeasure
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
           - The unit in which the data values are measured (kg, pound, euro), expressed as a simple string, in cases where no additional information is available (in the legacy system) or needed (as in the case of broad agreement within the community of use [i.e., ISO country codes, currencies, etc. in SDMX])
           - String 
           - 0..1
           - 

         * - descriptiveText
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
           - A short natural language account of the characteristics of the object.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 

         * - unitOfMeasureKind
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
           - Kind of unit of measure, so that it may be prone to translation to equivalent UOMs. Example values include "acceleration," "temperature," "salinity", etc. This description exists at the conceptual level, indicating a limitation on the type of representations which may be used for the variable as it is made more concrete.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ControlledVocabularyEntry` 
           - 0..1
           - 

         * - catalogDetails
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - Bundles the information useful for a data catalog entry. Examples would be creator, contributor, title, copyright, embargo, and license information. A set of information useful for attribution, data discovery, and access. This is information that is tied to the identity of the object. If this information changes the version of the associated object changes.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CatalogDetails` 
           - 0..1
           - 

         * - definition
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - Natural language statement conveying the meaning of a concept, differentiating it from other concepts. Supports the use of multiple languages and structured text. 'externalDefinition' can't be used if 'definition' is used.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
           - 0..1
           - 

         * - displayLabel
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - A human-readable display label for the object. Supports the use of multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::LabelForDisplay` 
           - 0..*
           - 

         * - externalDefinition
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - A reference to an external definition of a concept (that is, a concept which is described outside the content of the DDI-CDI metadata description). An example is a SKOS concept. The definition property is assumed to duplicate the external one referenced if externalDefinition is used. Other corresponding properties are assumed to be included unchanged if used.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Reference` 
           - 0..1
           - 

         * - identifier
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - Identifier for objects requiring short- or long-lasting referencing and management.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
           - 0..1
           - 

         * - name
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
           - Human understandable name (linguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
           - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
           - 0..*
           - 


.. container::
   :name: associations

   .. dropdown:: Associations
    
      .. list-table::
         :widths: 5 10 30 5 10 10 5 5 15
         :header-rows: 1
         :class: datatable-associations
       
         * - Direction
           - Association
           - Description
           - Multiplicity of InstanceVariable
           - Package of Other Class
           - Other Class
           - Multiplicity of other class
           - Aggregation Kind
           - Inherited from
         * - to
           - DataStructureComponent isDefinedBy RepresentedVariable
           - Data structure component is defined by zero to one represented variable.
           - 0..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::Components`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::Components::DataStructureComponent`
           - 0..*
           - none
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
         * - from
           - RepresentedVariable takesSentinelValuesFrom SentinelValueDomain
           - A represented variable may have more than one sets of sentinel value domains, one for each type of software platform on which related instance variables might be instantiated. All of the sentinel value domains must have sentinel conceptual domains that correspond exactly. This allows codes for missing values to be explicitly matched across platforms.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::SentinelValueDomain`
           - 0..*
           - none
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
         * - from
           - RepresentedVariable takesSubstantiveValuesFrom SubstantiveValueDomain
           - The substantive representation (substantive value domain) of the variable. This is equivalent to the relationship "Measures" in the Generic Statistical Information Model (GSIM) although GSIM makes no distinction between substantive and sentinel values.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::SubstantiveValueDomain`
           - 0..1
           - none
           - :ref:`Conceptual::RepresentedVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::RepresentedVariable>`
         * - from
           - ConceptualVariable measures UnitType
           - The measures association is intended to describe specific relationships between the ConceptualVariable and UnitType classes, and similar relationships between their sub-classes. This is documented in section VII.D.5 of the "DDI-Cross Domain Integration: Detailed Model" document.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::UnitType`
           - 0..1
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - from
           - ConceptualVariable takesSentinelConceptsFrom SentinelConceptualDomain
           - Identifies the conceptual domain containing the set of sentinel concepts used to describe the conceptual variable.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::SentinelConceptualDomain`
           - 0..1
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - from
           - ConceptualVariable takesSubstantiveConceptsFrom SubstantiveConceptualDomain
           - Identifies the substantive conceptual domain containing the set of substantive concepts used to describe the conceptual variable.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::SubstantiveConceptualDomain`
           - 0..1
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - to
           - VariableCollection has ConceptualVariable
           - Variable collection has zero to many conceptual variables.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::VariableCollection`
           - 0..*
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - to
           - VariablePosition indexes ConceptualVariable
           - Variable position indexes a conceptual variable.
           - 1..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::VariablePosition`
           - 0..*
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - to
           - VariableRelationship hasSource ConceptualVariable
           - 
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::VariableRelationship`
           - 0..*
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - to
           - VariableRelationship hasTarget ConceptualVariable
           - Note that this can be realized as a collection to support tuples.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::VariableRelationship`
           - 0..*
           - none
           - :ref:`Conceptual::ConceptualVariable<DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptualVariable>`
         * - to
           - AgentListing isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Agents`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::AgentListing`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ClassificationFamily isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::ClassificationFamily`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ClassificationIndex isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::ClassificationIndex`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ClassificationSeries isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::ClassificationSeries`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - Concept uses Concept
           - The uses association is intended to describe specific relationships between Concepts and several of its sub-classes. This is documented in section VII.D.5 of the "DDI-Cross Domain Integration: Detailed Model" document.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptMap hasSource Concept
           - Concept map has one to many source concepts.
           - 1..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptMap`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptMap hasTarget Concept
           - Concept map has one to many target concepts.
           - 1..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptMap`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptRelationship hasSource Concept
           - Restricts source object to concept for the relationship.
           - 1..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptRelationship`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptRelationship hasTarget Concept
           - Restricts target object to concept for the relationship.
           - 1..1
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptRelationship`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptSystem has Concept
           - Concept system has zero to many concepts.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptSystem`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - ConceptSystem isDefinedBy Concept
           - Concept system is defined by zero to many concepts. The conceptual basis for the collection of members.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::ConceptSystem`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - DataStore isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::DataStore`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - EnumerationDomain isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::EnumerationDomain`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - Level isDefinedBy Concept
           - A concept or concept sub-type which describes the level.
           - 0..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::Level`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - LogicalRecord isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecord`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - PhysicalDataSet isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalDataSet`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - PhysicalRecordSegment isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalRecordSegment`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - PhysicalSegmentLayout isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalSegmentLayout`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - VariableCollection isDefinedBy Concept
           - The conceptual basis for the collection of members.
           - 0..*
           - \- *own package* \-
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Conceptual::VariableCollection`
           - 0..*
           - none
           - :ref:`Conceptual::Concept<DDICDIModels::DDICDILibrary::Classes::Conceptual::Concept>`
         * - to
           - CategoryStatistic appliesTo InstanceVariable
           - 
           - 1..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::CategoryStatistic`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - DataPoint isDescribedBy InstanceVariable
           - The instance variable delimits the values which can populate a data point. Data point is described by one instance variable.
           - 1..1
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::DataPoint`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - Datum isBoundedBy InstanceVariable
           - A datum is bounded by an instance variable. The datum is drawn from a set of values, either substantive or sentinel described by the value domain of the instance variable.
           - 1..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::DataDescription::Datum`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - InstanceVariable has PhysicalSegmentLayout
           - 
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalSegmentLayout`
           - 0..*
           - none
           - \- *own class* \-
         * - from
           - InstanceVariable has ValueMapping
           - 
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::ValueMapping`
           - 0..1
           - shared
           - \- *own class* \-
         * - to
           - InstanceVariableMap hasSource InstanceVariable
           - The source instance variable for the relationship.
           - 1..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::InstanceVariableMap`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - InstanceVariableMap hasTarget InstanceVariable
           - Target instance variables if a directional relation is used.
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::InstanceVariableMap`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - LogicalRecord has InstanceVariable
           - 
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::LogicalRecord`
           - 0..*
           - none
           - \- *own class* \-
         * - to
           - PhysicalDataSet has InstanceVariable
           - 
           - 0..*
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription`
           - :ref:`DDICDIModels::DDICDILibrary::Classes::FormatDescription::PhysicalDataSet`
           - 0..*
           - none
           - \- *own class* \-

.. container::
   :name: encodings

   .. dropdown:: Syntax representations / encodings
    
      All syntax representations except the Canonical XMI are provided as reference points
      for specific implementations, or for use as defaults if sufficient in the form presented.
    
      .. tab-set::
    
         .. tab-item:: Canonical XMI
            :class-content: encoding
    
            Fragment for the class **InstanceVariable** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)
    
            .. literalinclude:: /xmi/InstanceVariable.xmi
               :lines: 2-
               :language: xml
               :linenos:
               :emphasize-lines: 4

         .. tab-item:: XML Schema
            :class-content: encoding

            Fragment for the class **InstanceVariable** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/InstanceVariable_xsd.txt 
               :language: xml
               :linenos:
               :emphasize-lines: 1
               :dedent: 2

         .. tab-item:: Ontology (Turtle)
            :class-content: encoding

            Fragment for the class **InstanceVariable** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/InstanceVariable.onto.ttl 
               :language: turtle
               :linenos:
               :emphasize-lines: 3

         .. tab-item:: JSON-LD
            :class-content: encoding

            Fragment for the class **InstanceVariable** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)
    
            .. literalinclude:: /DDICDILibrary/Classes/Conceptual/InstanceVariable.jsonld 
               :language: JSON-LD
               :linenos:
               :emphasize-lines: 5

