.. This code was generated by the Eclipse Acceleo project UCMIS M2T.
   Target language is 'reStructuredText' ('doc') generated on the basis of the model 'DDICDIModels'.

.. _DDICDIModels::DDICDILibrary::Classes::Representations::LevelStructure:


LevelStructure
**************

**Fully qualified class name**: DDICDIModels::DDICDILibrary::Classes::Representations:::index:`LevelStructure`


Definition 
============ 
Nesting structure of a hierarchical collection.   

Examples 
========== 
The International Standard Classification of Occupations (ISCO-08: https://www.ilo.org/public/english/bureau/stat/isco/isco08/) Major, Sub-Major, and Minor or the North American Industry Classification System (NAICS: https://www.census.gov/naics/) 2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list.

Explanatory notes 
=================== 
The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting. Levels are used to organize a hierarchy. Usually, a hierarchy contains one root member at the top, though it could contain several. These are the first level. All members directly related to those  in the first level compose the second level. The third and subsequent levels are defined similarly.  A level often is associated with a concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the level below the top is called Major Occupation Groups, and the next level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a major group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (minor groups) The categories in the nodes at the lower level aggregate to the category in node above them.  "Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (From the W3C Simple Knowlegde :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Organization` System: http://rdf-vocabulary.ddialliance.org/xkos.html#) :ref:`DDICDIModels::DDICDILibrary::Classes::Agents::Individual` classification items organized in a hierarchy may be associated with a specific level.


.. dropdown:: Diagram
   :open:

   .. container::
      :name: diagram

      .. uml:: /DDICDILibrary/Classes/Representations/LevelStructure.pu


.. dropdown:: Attributes

   .. list-table::
      :widths: 10 10 60 10 10 10
      :header-rows: 1
      :class: datatable-attributes

      * - Name
        - Inherited from
        - Description
        - Data Type
        - Multiplicity
        - Default value
      * - catalogDetails
        - \- *own class* \-
        - Bundles the information useful for a data catalog entry. 
          
          Examples would be creator, contributor, title, copyright, embargo, and license information
          
          A set of information useful for attribution, data discovery, and access.
          This is information that is tied to the identity of the object. If this information changes the version of the associated object changes.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::CatalogDetails` 
        - 0..1
        - 

      * - identifier
        - \- *own class* \-
        - Identifier for objects requiring short- or long-lasting referencing and management.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::Identifier` 
        - 0..1
        - 

      * - name
        - \- *own class* \-
        - Human understandable name (liguistic signifier, word, phrase, or mnemonic). May follow ISO/IEC 11179-5 naming principles, and have context provided to specify usage.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::ObjectName` 
        - 0..*
        - 

      * - usage
        - \- *own class* \-
        - Explanation of the ways in which the object is employed.
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::InternationalString` 
        - 0..1
        - 

      * - validDateRange
        - \- *own class* \-
        - The period for which the level object is valid, expressed as a start and end date (supports both ISO-standard and non-ISO date formats).
        - :ref:`DDICDIModels::DDICDILibrary::DataTypes::StructuredDataTypes::DateRange` 
        - 0..1
        - 


.. dropdown:: Associations

   .. list-table::
      :widths: 5 10 30 5 10 10 5 5 15
      :header-rows: 1
      :class: datatable-associations
   
      * - Direction
        - Association
        - Description
        - Multiplicity of LevelStructure
        - Package of Other Class
        - Other Class
        - Multiplicity of other class
        - Aggregation Kind
        - Inherited from
      * - to
        - EnumerationDomain uses LevelStructure
        - Has meaningful level to which members belong.
        - 0..1
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::EnumerationDomain`
        - 0..*
        - none
        - \- *own class* \-
      * - from
        - LevelStructure has Level
        - 
        - 0..*
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::Level`
        - 0..*
        - shared
        - \- *own class* \-
      * - to
        - StatisticalClassification has LevelStructure
        - 
        - 0..1
        - \- *own package* \-
        - :ref:`DDICDIModels::DDICDILibrary::Classes::Representations::StatisticalClassification`
        - 0..*
        - none
        - \- *own class* \-

.. dropdown:: Syntax representations / encodings

   All syntax representations except the Canonical XMI are provided as reference points
   for specific implementations, or for use as defaults if sufficient in the form presented.

   .. tab-set::

      .. tab-item:: Canonical XMI
         :class-content: encoding

         Fragment for the class **LevelStructure** (`entire model as XMI </encoding/xmi/ddi-cdi_canonical-unique-names.xmi>`_)

         .. literalinclude:: /xmi/LevelStructure.xmi
            :lines: 2-
            :language: xml
            :linenos:
            :emphasize-lines: 4

      .. tab-item:: XML Schema
         :class-content: encoding

         Fragment for the class **LevelStructure** (`entire XML Schema </encoding/xml-schema/ddi-cdi.xsd>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Representations/LevelStructure_xsd.txt 
            :language: xml
            :linenos:
            :emphasize-lines: 1
            :dedent: 2

      .. tab-item:: Ontology (Turtle)
         :class-content: encoding

         Fragment for the class **LevelStructure** (`main ontology </encoding/ontology/ddi-cdi.onto.ttl>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Representations/LevelStructure.onto.ttl 
            :language: turtle
            :linenos:
            :emphasize-lines: 3

      .. tab-item:: JSON-LD
         :class-content: encoding

         Fragment for the class **LevelStructure** (`main JSON-LD </encoding/json-ld/ddi-cdi.jsonld>`_)

         .. literalinclude:: /DDICDILibrary/Classes/Representations/LevelStructure.jsonld 
            :language: JSON-LD
            :linenos:
            :emphasize-lines: 5

